"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –ª–µ—Ç—É
–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π, –¥–∏–∞–≥—Ä–∞–º–º—ã –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ
"""

import matplotlib
matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º backend –±–µ–∑ GUI

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è matplotlib –æ —à—Ä–∏—Ñ—Ç–∞—Ö
import warnings
warnings.filterwarnings('ignore', category=UserWarning, module='matplotlib')

import matplotlib.pyplot as plt
import numpy as np
import io
import os
import tempfile
from typing import Optional, Tuple, List
from colorama import Fore, Style, init

init(autoreset=True)

class MathImageGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ (Windows-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —à—Ä–∏—Ñ—Ç—ã)
        import platform
        if platform.system() == "Windows":
            # –®—Ä–∏—Ñ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å –≤ Windows
            plt.rcParams['font.family'] = ['Segoe UI', 'Tahoma', 'Arial', 'sans-serif']
        else:
            # –î–ª—è Linux/Mac
            plt.rcParams['font.family'] = ['DejaVu Sans', 'Arial Unicode MS', 'Liberation Sans']
        
        plt.rcParams['axes.unicode_minus'] = False
        plt.rcParams['figure.figsize'] = (10, 8)
        plt.rcParams['figure.dpi'] = 100
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.temp_dir = tempfile.mkdtemp(prefix='mathbot_images_')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª—É—á—à–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
        self._setup_best_fonts()
        
        print(f"{Fore.GREEN}üìä [IMAGE GEN]{Style.RESET_ALL} –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø–∞–ø–∫–∞: {self.temp_dir}")
    
    def _setup_best_fonts(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª—É—á—à–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
        try:
            import matplotlib.font_manager as fm
            
            # –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
            preferred_fonts = [
                'Segoe UI',           # Windows 10/11 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                'Tahoma',             # –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ Windows  
                'Verdana',            # –®–∏—Ä–æ–∫–æ –¥–æ—Å—Ç—É–ø–µ–Ω
                'Arial',              # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π
                'Calibri',            # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Windows
                'Times New Roman',    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
                'DejaVu Sans',        # Linux
                'Liberation Sans',    # Linux –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
                'Arial Unicode MS'    # Mac/—Å—Ç–∞—Ä—ã–µ —Å–∏—Å—Ç–µ–º—ã
            ]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
            available_fonts = [f.name for f in fm.fontManager.ttflist]
            
            # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —à—Ä–∏—Ñ—Ç –∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö
            best_font = None
            for font in preferred_fonts:
                if font in available_fonts:
                    best_font = font
                    break
            
            if best_font:
                plt.rcParams['font.family'] = [best_font]
                self._log(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à—Ä–∏—Ñ—Ç: {best_font}", "SUCCESS")
            else:
                # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É —à—Ä–∏—Ñ—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                plt.rcParams['font.family'] = ['sans-serif']
                self._log("–ò—Å–ø–æ–ª—å–∑—É—é —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", "WARNING")
                
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            plt.rcParams['font.sans-serif'] = plt.rcParams['font.family'] + ['DejaVu Sans', 'Tahoma', 'Arial']
            
        except Exception as e:
            self._log(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤: {e}", "ERROR")
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            plt.rcParams['font.family'] = ['sans-serif']
    
    def _log(self, message: str, level: str = "INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            if level == "INFO": 
                color, emoji = Fore.CYAN, "üìä"
            elif level == "ERROR": 
                color, emoji = Fore.RED, "‚ùå"
            elif level == "SUCCESS": 
                color, emoji = Fore.GREEN, "‚úÖ"
            else: 
                color, emoji = Fore.WHITE, "üìù"
            
            print(f"{color}[{emoji} IMAGE GEN]{Style.RESET_ALL} {message}")
        except Exception as e:
            print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}{Style.RESET_ALL}")
    
    def generate_trigonometric_circle(self) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏"""
        try:
            self._log("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏")
            
            fig, ax = plt.subplots(1, 1, figsize=(10, 10))
            
            # –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω–∏—á–Ω—É—é –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å
            theta = np.linspace(0, 2*np.pi, 100)
            x_circle = np.cos(theta)
            y_circle = np.sin(theta)
            
            # –†–∏—Å—É–µ–º –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å
            ax.plot(x_circle, y_circle, 'b-', linewidth=2, label='–ï–¥–∏–Ω–∏—á–Ω–∞—è –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å')
            
            # –û—Å–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            ax.axhline(y=0, color='k', linewidth=1)
            ax.axvline(x=0, color='k', linewidth=1)
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ —É–≥–ª—ã
            angles = [0, np.pi/6, np.pi/4, np.pi/3, np.pi/2, 2*np.pi/3, 3*np.pi/4, 5*np.pi/6, np.pi]
            angle_labels = ['0¬∞', '30¬∞', '45¬∞', '60¬∞', '90¬∞', '120¬∞', '135¬∞', '150¬∞', '180¬∞']
            
            for angle, label in zip(angles, angle_labels):
                x = np.cos(angle)
                y = np.sin(angle)
                ax.plot(x, y, 'ro', markersize=8)
                
                # –ü–æ–¥–ø–∏—Å–∏ —É–≥–ª–æ–≤
                offset = 0.15
                ax.annotate(label, (x + offset*np.cos(angle), y + offset*np.sin(angle)), 
                          fontsize=10, ha='center', va='center')
                
                # –õ–∏–Ω–∏–∏ –∫ —Ç–æ—á–∫–∞–º
                ax.plot([0, x], [0, y], 'r--', alpha=0.5, linewidth=1)
            
            # –ü–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
            ax.text(1.1, 0, 'cos Œ∏', fontsize=12, ha='center', va='bottom')
            ax.text(0, 1.1, 'sin Œ∏', fontsize=12, ha='right', va='center')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
            ax.set_xlim(-1.3, 1.3)
            ax.set_ylim(-1.3, 1.3)
            ax.set_aspect('equal')
            ax.grid(True, alpha=0.3)
            ax.set_title('–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å', fontsize=16, fontweight='bold')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            filename = os.path.join(self.temp_dir, 'trigonometric_circle.png')
            plt.savefig(filename, dpi=150, bbox_inches='tight')
            plt.close()
            
            self._log(f"–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}", "SUCCESS")
            return filename
            
        except Exception as e:
            self._log(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏: {e}", "ERROR")
            return None
    
    def generate_trigonometric_functions(self) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        try:
            self._log("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π")
            
            fig, axes = plt.subplots(2, 2, figsize=(15, 12))
            fig.suptitle('–û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏', fontsize=16, fontweight='bold')
            
            x = np.linspace(-2*np.pi, 2*np.pi, 1000)
            
            # sin(x)
            axes[0,0].plot(x, np.sin(x), 'b-', linewidth=2, label='y = sin(x)')
            axes[0,0].set_title('–°–∏–Ω—É—Å', fontweight='bold')
            axes[0,0].grid(True, alpha=0.3)
            axes[0,0].set_ylim(-1.5, 1.5)
            axes[0,0].axhline(y=0, color='k', linewidth=0.8)
            axes[0,0].axvline(x=0, color='k', linewidth=0.8)
            
            # cos(x)
            axes[0,1].plot(x, np.cos(x), 'r-', linewidth=2, label='y = cos(x)')
            axes[0,1].set_title('–ö–æ—Å–∏–Ω—É—Å', fontweight='bold')
            axes[0,1].grid(True, alpha=0.3)
            axes[0,1].set_ylim(-1.5, 1.5)
            axes[0,1].axhline(y=0, color='k', linewidth=0.8)
            axes[0,1].axvline(x=0, color='k', linewidth=0.8)
            
            # tan(x)
            x_tan = np.linspace(-2*np.pi, 2*np.pi, 1000)
            y_tan = np.tan(x_tan)
            # –£–±–∏—Ä–∞–µ–º —Ä–∞–∑—Ä—ã–≤—ã
            y_tan[np.abs(y_tan) > 10] = np.nan
            axes[1,0].plot(x_tan, y_tan, 'g-', linewidth=2, label='y = tan(x)')
            axes[1,0].set_title('–¢–∞–Ω–≥–µ–Ω—Å', fontweight='bold')
            axes[1,0].grid(True, alpha=0.3)
            axes[1,0].set_ylim(-5, 5)
            axes[1,0].axhline(y=0, color='k', linewidth=0.8)
            axes[1,0].axvline(x=0, color='k', linewidth=0.8)
            
            # –ê—Å–∏–º–ø—Ç–æ—Ç—ã –¥–ª—è —Ç–∞–Ω–≥–µ–Ω—Å–∞
            for k in range(-2, 3):
                axes[1,0].axvline(x=np.pi/2 + k*np.pi, color='r', linestyle='--', alpha=0.5)
            
            # cot(x)
            x_cot = np.linspace(-2*np.pi, 2*np.pi, 1000)
            y_cot = 1/np.tan(x_cot)
            y_cot[np.abs(y_cot) > 10] = np.nan
            axes[1,1].plot(x_cot, y_cot, 'm-', linewidth=2, label='y = cot(x)')
            axes[1,1].set_title('–ö–æ—Ç–∞–Ω–≥–µ–Ω—Å', fontweight='bold')
            axes[1,1].grid(True, alpha=0.3)
            axes[1,1].set_ylim(-5, 5)
            axes[1,1].axhline(y=0, color='k', linewidth=0.8)
            axes[1,1].axvline(x=0, color='k', linewidth=0.8)
            
            # –ê—Å–∏–º–ø—Ç–æ—Ç—ã –¥–ª—è –∫–æ—Ç–∞–Ω–≥–µ–Ω—Å–∞
            for k in range(-2, 3):
                axes[1,1].axvline(x=k*np.pi, color='r', linestyle='--', alpha=0.5)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ—Å–µ–π
            for ax in axes.flat:
                ax.set_xlabel('x (—Ä–∞–¥–∏–∞–Ω—ã)')
                ax.set_ylabel('y')
                
                # –û—Ç–º–µ—Ç–∫–∏ –Ω–∞ –æ—Å–∏ X
                pi_ticks = [-2*np.pi, -np.pi, -np.pi/2, 0, np.pi/2, np.pi, 2*np.pi]
                pi_labels = ['-2œÄ', '-œÄ', '-œÄ/2', '0', 'œÄ/2', 'œÄ', '2œÄ']
                ax.set_xticks(pi_ticks)
                ax.set_xticklabels(pi_labels)
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            filename = os.path.join(self.temp_dir, 'trigonometric_functions.png')
            plt.savefig(filename, dpi=150, bbox_inches='tight')
            plt.close()
            
            self._log(f"–ì—Ä–∞—Ñ–∏–∫–∏ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}", "SUCCESS")
            return filename
            
        except Exception as e:
            self._log(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {e}", "ERROR")
            return None
    
    def generate_function_graph(self, function_type: str, params: dict = None) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        try:
            self._log(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏: {function_type}")
            
            fig, ax = plt.subplots(1, 1, figsize=(12, 8))
            
            if function_type == "linear":
                # –õ–∏–Ω–µ–π–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è y = kx + b
                k = params.get('k', 1) if params else 1
                b = params.get('b', 0) if params else 0
                
                x = np.linspace(-10, 10, 100)
                y = k * x + b
                
                ax.plot(x, y, 'b-', linewidth=2, label=f'y = {k}x + {b}')
                ax.set_title(f'–õ–∏–Ω–µ–π–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: y = {k}x + {b}', fontweight='bold')
                
            elif function_type == "quadratic":
                # –ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è y = ax¬≤ + bx + c
                a = params.get('a', 1) if params else 1
                b = params.get('b', 0) if params else 0
                c = params.get('c', 0) if params else 0
                
                x = np.linspace(-10, 10, 100)
                y = a * x**2 + b * x + c
                
                ax.plot(x, y, 'r-', linewidth=2, label=f'y = {a}x¬≤ + {b}x + {c}')
                ax.set_title(f'–ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: y = {a}x¬≤ + {b}x + {c}', fontweight='bold')
                
                # –í–µ—Ä—à–∏–Ω–∞ –ø–∞—Ä–∞–±–æ–ª—ã
                x_vertex = -b / (2*a) if a != 0 else 0
                y_vertex = a * x_vertex**2 + b * x_vertex + c
                ax.plot(x_vertex, y_vertex, 'ro', markersize=8, label=f'–í–µ—Ä—à–∏–Ω–∞ ({x_vertex:.1f}, {y_vertex:.1f})')
                
            elif function_type == "hyperbola":
                # –ì–∏–ø–µ—Ä–±–æ–ª–∞ y = k/x
                k = params.get('k', 1) if params else 1
                
                x_pos = np.linspace(0.1, 10, 100)
                x_neg = np.linspace(-10, -0.1, 100)
                y_pos = k / x_pos
                y_neg = k / x_neg
                
                ax.plot(x_pos, y_pos, 'g-', linewidth=2, label=f'y = {k}/x')
                ax.plot(x_neg, y_neg, 'g-', linewidth=2)
                ax.set_title(f'–ì–∏–ø–µ—Ä–±–æ–ª–∞: y = {k}/x', fontweight='bold')
                
                # –ê—Å–∏–º–ø—Ç–æ—Ç—ã
                ax.axhline(y=0, color='r', linestyle='--', alpha=0.5, label='–ê—Å–∏–º–ø—Ç–æ—Ç—ã')
                ax.axvline(x=0, color='r', linestyle='--', alpha=0.5)
                
            elif function_type == "absolute":
                # –ú–æ–¥—É–ª—å y = |x|
                x = np.linspace(-10, 10, 100)
                y = np.abs(x)
                
                ax.plot(x, y, 'm-', linewidth=2, label='y = |x|')
                ax.set_title('–§—É–Ω–∫—Ü–∏—è –º–æ–¥—É–ª—è: y = |x|', fontweight='bold')
                
            elif function_type == "sqrt":
                # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å y = ‚àöx
                x = np.linspace(0, 10, 100)
                y = np.sqrt(x)
                
                ax.plot(x, y, 'orange', linewidth=2, label='y = ‚àöx')
                ax.set_title('–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å: y = ‚àöx', fontweight='bold')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
            ax.grid(True, alpha=0.3)
            ax.axhline(y=0, color='k', linewidth=0.8)
            ax.axvline(x=0, color='k', linewidth=0.8)
            ax.set_xlabel('x')
            ax.set_ylabel('y')
            ax.legend()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            filename = os.path.join(self.temp_dir, f'graph_{function_type}.png')
            plt.savefig(filename, dpi=150, bbox_inches='tight')
            plt.close()
            
            self._log(f"–ì—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ {function_type} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}", "SUCCESS")
            return filename
            
        except Exception as e:
            self._log(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ {function_type}: {e}", "ERROR")
            return None
    
    def generate_multiple_graphs(self) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        try:
            self._log("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π")
            
            fig, ax = plt.subplots(1, 1, figsize=(14, 10))
            
            x = np.linspace(-5, 5, 1000)
            
            # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            functions = [
                (x, '–ª–∏–Ω–µ–π–Ω–∞—è', 'b-'),
                (x**2, '–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è', 'r-'),
                (x**3, '–∫—É–±–∏—á–µ—Å–∫–∞—è', 'g-'),
                (np.abs(x), '–º–æ–¥—É–ª—å', 'm-'),
            ]
            
            for y_vals, name, style in functions:
                ax.plot(x, y_vals, style, linewidth=2, label=f'y = {name}')
            
            # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å (—Ç–æ–ª—å–∫–æ –¥–ª—è x >= 0)
            x_sqrt = np.linspace(0, 5, 100)
            ax.plot(x_sqrt, np.sqrt(x_sqrt), 'orange', linewidth=2, label='y = ‚àöx')
            
            # –ì–∏–ø–µ—Ä–±–æ–ª–∞
            x_hyp_pos = np.linspace(0.1, 5, 100)
            x_hyp_neg = np.linspace(-5, -0.1, 100)
            ax.plot(x_hyp_pos, 1/x_hyp_pos, 'cyan', linewidth=2, label='y = 1/x')
            ax.plot(x_hyp_neg, 1/x_hyp_neg, 'cyan', linewidth=2)
            
            ax.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π', fontsize=16, fontweight='bold')
            ax.set_xlabel('x')
            ax.set_ylabel('y')
            ax.grid(True, alpha=0.3)
            ax.axhline(y=0, color='k', linewidth=0.8)
            ax.axvline(x=0, color='k', linewidth=0.8)
            ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
            ax.set_xlim(-5, 5)
            ax.set_ylim(-5, 5)
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            filename = os.path.join(self.temp_dir, 'multiple_graphs.png')
            plt.savefig(filename, dpi=150, bbox_inches='tight')
            plt.close()
            
            self._log(f"–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}", "SUCCESS")
            return filename
            
        except Exception as e:
            self._log(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}", "ERROR")
            return None
    
    # ====== –ì–ï–û–ú–ï–¢–†–ò–ß–ï–°–ö–ò–ï –§–ò–ì–£–†–´ ======
    
    def generate_triangles_diagram(self) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤"""
        try:
            self._log("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤")
            
            fig, axes = plt.subplots(2, 3, figsize=(15, 10))
            fig.suptitle('–¢–∏–ø—ã —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤', fontsize=16, fontweight='bold')
            
            # –†–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
            ax = axes[0,0]
            h = np.sqrt(3)/2
            triangle_eq = np.array([[0, 0.5, 1, 0], [0, h, 0, 0]])
            ax.plot(triangle_eq[0], triangle_eq[1], 'b-', linewidth=2)
            ax.fill(triangle_eq[0][:-1], triangle_eq[1][:-1], alpha=0.3, color='blue')
            ax.set_title('–†–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π\n(–≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã —Ä–∞–≤–Ω—ã)')
            ax.set_aspect('equal')
            ax.grid(True, alpha=0.3)
            
            # –†–∞–≤–Ω–æ–±–µ–¥—Ä–µ–Ω–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
            ax = axes[0,1]
            triangle_iso = np.array([[0, 0.5, 1, 0], [0, 0.8, 0, 0]])
            ax.plot(triangle_iso[0], triangle_iso[1], 'r-', linewidth=2)
            ax.fill(triangle_iso[0][:-1], triangle_iso[1][:-1], alpha=0.3, color='red')
            ax.set_title('–†–∞–≤–Ω–æ–±–µ–¥—Ä–µ–Ω–Ω—ã–π\n(–¥–≤–µ —Å—Ç–æ—Ä–æ–Ω—ã —Ä–∞–≤–Ω—ã)')
            ax.set_aspect('equal')
            ax.grid(True, alpha=0.3)
            
            # –†–∞–∑–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
            ax = axes[0,2]
            triangle_scal = np.array([[0, 0.7, 1, 0], [0, 0.6, 0, 0]])
            ax.plot(triangle_scal[0], triangle_scal[1], 'g-', linewidth=2)
            ax.fill(triangle_scal[0][:-1], triangle_scal[1][:-1], alpha=0.3, color='green')
            ax.set_title('–†–∞–∑–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π\n(–≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã —Ä–∞–∑–Ω—ã–µ)')
            ax.set_aspect('equal')
            ax.grid(True, alpha=0.3)
            
            # –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
            ax = axes[1,0]
            triangle_right = np.array([[0, 0, 0.8, 0], [0, 0.6, 0, 0]])
            ax.plot(triangle_right[0], triangle_right[1], 'm-', linewidth=2)
            ax.fill(triangle_right[0][:-1], triangle_right[1][:-1], alpha=0.3, color='magenta')
            # –û—Ç–º–µ—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ —É–≥–ª–∞
            ax.plot([0, 0.1, 0.1, 0], [0, 0, 0.1, 0.1], 'k-', linewidth=1)
            ax.set_title('–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π\n(–æ–¥–∏–Ω —É–≥–æ–ª 90¬∞)')
            ax.set_aspect('equal')
            ax.grid(True, alpha=0.3)
            
            # –û—Å—Ç—Ä–æ—É–≥–æ–ª—å–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
            ax = axes[1,1]
            triangle_acute = np.array([[0, 0.5, 0.9, 0], [0, 0.7, 0.1, 0]])
            ax.plot(triangle_acute[0], triangle_acute[1], 'orange', linewidth=2)
            ax.fill(triangle_acute[0][:-1], triangle_acute[1][:-1], alpha=0.3, color='orange')
            ax.set_title('–û—Å—Ç—Ä–æ—É–≥–æ–ª—å–Ω—ã–π\n(–≤—Å–µ —É–≥–ª—ã < 90¬∞)')
            ax.set_aspect('equal')
            ax.grid(True, alpha=0.3)
            
            # –¢—É–ø–æ—É–≥–æ–ª—å–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
            ax = axes[1,2]
            triangle_obtuse = np.array([[0, 0.3, 1, 0], [0, 0.2, 0, 0]])
            ax.plot(triangle_obtuse[0], triangle_obtuse[1], 'cyan', linewidth=2)
            ax.fill(triangle_obtuse[0][:-1], triangle_obtuse[1][:-1], alpha=0.3, color='cyan')
            ax.set_title('–¢—É–ø–æ—É–≥–æ–ª—å–Ω—ã–π\n(–æ–¥–∏–Ω —É–≥–æ–ª > 90¬∞)')
            ax.set_aspect('equal')
            ax.grid(True, alpha=0.3)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ—Å–µ–π
            for ax in axes.flat:
                ax.set_xlim(-0.1, 1.1)
                ax.set_ylim(-0.1, 1)
                ax.set_xticks([])
                ax.set_yticks([])
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            filename = os.path.join(self.temp_dir, 'triangles_diagram.png')
            plt.savefig(filename, dpi=150, bbox_inches='tight')
            plt.close()
            
            self._log(f"–î–∏–∞–≥—Ä–∞–º–º–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}", "SUCCESS")
            return filename
            
        except Exception as e:
            self._log(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤: {e}", "ERROR")
            return None
    
    def generate_quadrilaterals_diagram(self) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É —á–µ—Ç—ã—Ä—ë—Ö—É–≥–æ–ª—å–Ω–∏–∫–æ–≤"""
        try:
            self._log("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã —á–µ—Ç—ã—Ä—ë—Ö—É–≥–æ–ª—å–Ω–∏–∫–æ–≤")
            
            fig, axes = plt.subplots(2, 3, figsize=(15, 10))
            fig.suptitle('–ß–µ—Ç—ã—Ä—ë—Ö—É–≥–æ–ª—å–Ω–∏–∫–∏', fontsize=16, fontweight='bold')
            
            # –ö–≤–∞–¥—Ä–∞—Ç
            ax = axes[0,0]
            square = np.array([[0.2, 0.8, 0.8, 0.2, 0.2], [0.2, 0.2, 0.8, 0.8, 0.2]])
            ax.plot(square[0], square[1], 'b-', linewidth=2)
            ax.fill(square[0], square[1], alpha=0.3, color='blue')
            ax.set_title('–ö–≤–∞–¥—Ä–∞—Ç\n(–≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã —Ä–∞–≤–Ω—ã,\n–≤—Å–µ —É–≥–ª—ã 90¬∞)')
            ax.set_aspect('equal')
            ax.grid(True, alpha=0.3)
            
            # –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            ax = axes[0,1]
            rectangle = np.array([[0.1, 0.9, 0.9, 0.1, 0.1], [0.3, 0.3, 0.7, 0.7, 0.3]])
            ax.plot(rectangle[0], rectangle[1], 'r-', linewidth=2)
            ax.fill(rectangle[0], rectangle[1], alpha=0.3, color='red')
            ax.set_title('–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫\n(–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —Ä–∞–≤–Ω—ã,\n–≤—Å–µ —É–≥–ª—ã 90¬∞)')
            ax.set_aspect('equal')
            ax.grid(True, alpha=0.3)
            
            # –†–æ–º–±
            ax = axes[0,2]
            rhombus = np.array([[0.5, 0.8, 0.5, 0.2, 0.5], [0.2, 0.5, 0.8, 0.5, 0.2]])
            ax.plot(rhombus[0], rhombus[1], 'g-', linewidth=2)
            ax.fill(rhombus[0], rhombus[1], alpha=0.3, color='green')
            ax.set_title('–†–æ–º–±\n(–≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã —Ä–∞–≤–Ω—ã,\n–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —É–≥–ª—ã —Ä–∞–≤–Ω—ã)')
            ax.set_aspect('equal')
            ax.grid(True, alpha=0.3)
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª–æ–≥—Ä–∞–º–º
            ax = axes[1,0]
            parallelogram = np.array([[0.1, 0.7, 0.9, 0.3, 0.1], [0.2, 0.2, 0.7, 0.7, 0.2]])
            ax.plot(parallelogram[0], parallelogram[1], 'm-', linewidth=2)
            ax.fill(parallelogram[0], parallelogram[1], alpha=0.3, color='magenta')
            ax.set_title('–ü–∞—Ä–∞–ª–ª–µ–ª–æ–≥—Ä–∞–º–º\n(–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã\n–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã –∏ —Ä–∞–≤–Ω—ã)')
            ax.set_aspect('equal')
            ax.grid(True, alpha=0.3)
            
            # –¢—Ä–∞–ø–µ—Ü–∏—è
            ax = axes[1,1]
            trapezoid = np.array([[0.2, 0.8, 0.7, 0.3, 0.2], [0.2, 0.2, 0.8, 0.8, 0.2]])
            ax.plot(trapezoid[0], trapezoid[1], 'orange', linewidth=2)
            ax.fill(trapezoid[0], trapezoid[1], alpha=0.3, color='orange')
            ax.set_title('–¢—Ä–∞–ø–µ—Ü–∏—è\n(–æ–¥–Ω–∞ –ø–∞—Ä–∞\n–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω)')
            ax.set_aspect('equal')
            ax.grid(True, alpha=0.3)
            
            # –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —á–µ—Ç—ã—Ä—ë—Ö—É–≥–æ–ª—å–Ω–∏–∫
            ax = axes[1,2]
            quad = np.array([[0.1, 0.8, 0.7, 0.2, 0.1], [0.3, 0.1, 0.8, 0.6, 0.3]])
            ax.plot(quad[0], quad[1], 'cyan', linewidth=2)
            ax.fill(quad[0], quad[1], alpha=0.3, color='cyan')
            ax.set_title('–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π\n—á–µ—Ç—ã—Ä—ë—Ö—É–≥–æ–ª—å–Ω–∏–∫')
            ax.set_aspect('equal')
            ax.grid(True, alpha=0.3)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ—Å–µ–π
            for ax in axes.flat:
                ax.set_xlim(0, 1)
                ax.set_ylim(0, 1)
                ax.set_xticks([])
                ax.set_yticks([])
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            filename = os.path.join(self.temp_dir, 'quadrilaterals_diagram.png')
            plt.savefig(filename, dpi=150, bbox_inches='tight')
            plt.close()
            
            self._log(f"–î–∏–∞–≥—Ä–∞–º–º–∞ —á–µ—Ç—ã—Ä—ë—Ö—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}", "SUCCESS")
            return filename
            
        except Exception as e:
            self._log(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã —á–µ—Ç—ã—Ä—ë—Ö—É–≥–æ–ª—å–Ω–∏–∫–æ–≤: {e}", "ERROR")
            return None
    
    def generate_circle_diagram(self) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏"""
        try:
            self._log("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏")
            
            fig, ax = plt.subplots(1, 1, figsize=(12, 12))
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å
            theta = np.linspace(0, 2*np.pi, 100)
            radius = 3
            center_x, center_y = 0, 0
            x_circle = center_x + radius * np.cos(theta)
            y_circle = center_y + radius * np.sin(theta)
            
            ax.plot(x_circle, y_circle, 'b-', linewidth=3, label='–û–∫—Ä—É–∂–Ω–æ—Å—Ç—å')
            
            # –¶–µ–Ω—Ç—Ä
            ax.plot(center_x, center_y, 'ro', markersize=8, label='–¶–µ–Ω—Ç—Ä (O)')
            ax.text(center_x-0.3, center_y-0.3, 'O', fontsize=12, fontweight='bold')
            
            # –†–∞–¥–∏—É—Å—ã
            angles_rad = [0, np.pi/4, np.pi]
            for i, angle in enumerate(angles_rad):
                x_end = center_x + radius * np.cos(angle)
                y_end = center_y + radius * np.sin(angle)
                ax.plot([center_x, x_end], [center_y, y_end], 'r-', linewidth=2)
                if i == 0:
                    ax.text(x_end/2, y_end/2 + 0.2, 'R (—Ä–∞–¥–∏—É—Å)', fontsize=10, ha='center')
            
            # –î–∏–∞–º–µ—Ç—Ä
            ax.plot([-radius, radius], [0, 0], 'g-', linewidth=3, label='–î–∏–∞–º–µ—Ç—Ä')
            ax.text(0, -0.5, 'D = 2R (–¥–∏–∞–º–µ—Ç—Ä)', fontsize=10, ha='center', color='green')
            
            # –•–æ—Ä–¥–∞
            chord_angle1, chord_angle2 = np.pi/6, 5*np.pi/6
            x1 = center_x + radius * np.cos(chord_angle1)
            y1 = center_y + radius * np.sin(chord_angle1)
            x2 = center_x + radius * np.cos(chord_angle2)
            y2 = center_y + radius * np.sin(chord_angle2)
            ax.plot([x1, x2], [y1, y2], 'm-', linewidth=2, label='–•–æ—Ä–¥–∞')
            ax.text((x1+x2)/2, (y1+y2)/2 + 0.3, '–•–æ—Ä–¥–∞', fontsize=10, ha='center', color='magenta')
            
            # –ö–∞—Å–∞—Ç–µ–ª—å–Ω–∞—è
            tang_angle = np.pi/3
            x_tang = center_x + radius * np.cos(tang_angle)
            y_tang = center_y + radius * np.sin(tang_angle)
            
            # –¢–æ—á–∫–∞ –∫–∞—Å–∞–Ω–∏—è
            ax.plot(x_tang, y_tang, 'ko', markersize=6)
            ax.text(x_tang + 0.3, y_tang + 0.3, 'T', fontsize=10, fontweight='bold')
            
            # –ö–∞—Å–∞—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è (–ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ —Ä–∞–¥–∏—É—Å—É)
            tang_len = 2
            dx = -radius * np.sin(tang_angle)
            dy = radius * np.cos(tang_angle)
            norm = np.sqrt(dx**2 + dy**2)
            dx, dy = dx/norm * tang_len, dy/norm * tang_len
            
            ax.plot([x_tang - dx, x_tang + dx], [y_tang - dy, y_tang + dy], 'orange', linewidth=2, label='–ö–∞—Å–∞—Ç–µ–ª—å–Ω–∞—è')
            ax.text(x_tang + dx*0.7, y_tang + dy*0.7, '–ö–∞—Å–∞—Ç–µ–ª—å–Ω–∞—è', fontsize=10, color='orange')
            
            # –°–µ–∫—É—â–∞—è
            sec_angle1, sec_angle2 = -np.pi/4, 3*np.pi/4
            x3 = center_x + radius * np.cos(sec_angle1)
            y3 = center_y + radius * np.sin(sec_angle1)
            x4 = center_x + radius * np.cos(sec_angle2)
            y4 = center_y + radius * np.sin(sec_angle2)
            
            # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å–µ–∫—É—â—É—é –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏
            extend = 1.5
            dx_sec = x4 - x3
            dy_sec = y4 - y3
            norm_sec = np.sqrt(dx_sec**2 + dy_sec**2)
            dx_sec, dy_sec = dx_sec/norm_sec * extend, dy_sec/norm_sec * extend
            
            ax.plot([x3 - dx_sec, x4 + dx_sec], [y3 - dy_sec, y4 + dy_sec], 'cyan', linewidth=2, label='–°–µ–∫—É—â–∞—è')
            ax.text((x3+x4)/2 - 1, (y3+y4)/2 - 0.5, '–°–µ–∫—É—â–∞—è', fontsize=10, color='cyan')
            
            ax.set_title('–≠–ª–µ–º–µ–Ω—Ç—ã –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏', fontsize=16, fontweight='bold')
            ax.set_xlabel('x')
            ax.set_ylabel('y')
            ax.grid(True, alpha=0.3)
            ax.set_aspect('equal')
            ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
            ax.set_xlim(-5, 5)
            ax.set_ylim(-5, 5)
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            filename = os.path.join(self.temp_dir, 'circle_diagram.png')
            plt.savefig(filename, dpi=150, bbox_inches='tight')
            plt.close()
            
            self._log(f"–î–∏–∞–≥—Ä–∞–º–º–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}", "SUCCESS")
            return filename
            
        except Exception as e:
            self._log(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏: {e}", "ERROR")
            return None
    
    def generate_areas_volumes_diagram(self) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏ –ø–ª–æ—â–∞–¥–µ–π –∏ –æ–±—ä—ë–º–æ–≤"""
        try:
            self._log("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã –ø–ª–æ—â–∞–¥–µ–π –∏ –æ–±—ä—ë–º–æ–≤")
            
            fig = plt.figure(figsize=(16, 12))
            fig.suptitle('–ü–ª–æ—â–∞–¥–∏ –∏ –æ–±—ä—ë–º—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∏–≥—É—Ä', fontsize=18, fontweight='bold')
            
            # 2D —Ñ–∏–≥—É—Ä—ã (–ø–ª–æ—â–∞–¥–∏)
            # –ö–≤–∞–¥—Ä–∞—Ç
            ax1 = plt.subplot(3, 4, 1)
            square = np.array([[0.2, 0.8, 0.8, 0.2, 0.2], [0.2, 0.2, 0.8, 0.8, 0.2]])
            ax1.plot(square[0], square[1], 'b-', linewidth=2)
            ax1.fill(square[0], square[1], alpha=0.3, color='blue')
            ax1.text(0.5, 0.1, 'S = a¬≤', fontsize=12, ha='center', fontweight='bold')
            ax1.set_title('–ö–≤–∞–¥—Ä–∞—Ç')
            ax1.set_aspect('equal')
            ax1.set_xticks([])
            ax1.set_yticks([])
            
            # –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            ax2 = plt.subplot(3, 4, 2)
            rect = np.array([[0.1, 0.9, 0.9, 0.1, 0.1], [0.3, 0.3, 0.7, 0.7, 0.3]])
            ax2.plot(rect[0], rect[1], 'r-', linewidth=2)
            ax2.fill(rect[0], rect[1], alpha=0.3, color='red')
            ax2.text(0.5, 0.1, 'S = a √ó b', fontsize=12, ha='center', fontweight='bold')
            ax2.set_title('–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫')
            ax2.set_aspect('equal')
            ax2.set_xticks([])
            ax2.set_yticks([])
            
            # –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
            ax3 = plt.subplot(3, 4, 3)
            triangle = np.array([[0.2, 0.5, 0.8, 0.2], [0.2, 0.8, 0.2, 0.2]])
            ax3.plot(triangle[0], triangle[1], 'g-', linewidth=2)
            ax3.fill(triangle[0][:-1], triangle[1][:-1], alpha=0.3, color='green')
            ax3.text(0.5, 0.1, 'S = ¬Ω √ó a √ó h', fontsize=12, ha='center', fontweight='bold')
            ax3.set_title('–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫')
            ax3.set_aspect('equal')
            ax3.set_xticks([])
            ax3.set_yticks([])
            
            # –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å
            ax4 = plt.subplot(3, 4, 4)
            theta = np.linspace(0, 2*np.pi, 100)
            x_circ = 0.5 + 0.3 * np.cos(theta)
            y_circ = 0.5 + 0.3 * np.sin(theta)
            ax4.plot(x_circ, y_circ, 'purple', linewidth=2)
            ax4.fill(x_circ, y_circ, alpha=0.3, color='purple')
            ax4.text(0.5, 0.1, 'S = œÄ √ó r¬≤', fontsize=12, ha='center', fontweight='bold')
            ax4.set_title('–ö—Ä—É–≥')
            ax4.set_aspect('equal')
            ax4.set_xticks([])
            ax4.set_yticks([])
            
            # 3D —Ñ–∏–≥—É—Ä—ã (–æ–±—ä—ë–º—ã)
            # –ö—É–± (–∏–∑–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è)
            ax5 = plt.subplot(3, 4, 5)
            # –ü–µ—Ä–µ–¥–Ω—è—è –≥—Ä–∞–Ω—å
            ax5.plot([0.2, 0.6, 0.6, 0.2, 0.2], [0.2, 0.2, 0.6, 0.6, 0.2], 'b-', linewidth=2)
            # –ó–∞–¥–Ω—è—è –≥—Ä–∞–Ω—å (—Å–º–µ—â—ë–Ω–Ω–∞—è)
            ax5.plot([0.4, 0.8, 0.8, 0.4, 0.4], [0.4, 0.4, 0.8, 0.8, 0.4], 'b-', linewidth=2)
            # –°–æ–µ–¥–∏–Ω—è—é—â–∏–µ —Ä—ë–±—Ä–∞
            ax5.plot([0.2, 0.4], [0.2, 0.4], 'b-', linewidth=2)
            ax5.plot([0.6, 0.8], [0.2, 0.4], 'b-', linewidth=2)
            ax5.plot([0.6, 0.8], [0.6, 0.8], 'b-', linewidth=2)
            ax5.plot([0.2, 0.4], [0.6, 0.8], 'b-', linewidth=2)
            ax5.text(0.5, 0.1, 'V = a¬≥', fontsize=12, ha='center', fontweight='bold')
            ax5.set_title('–ö—É–±')
            ax5.set_aspect('equal')
            ax5.set_xticks([])
            ax5.set_yticks([])
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª–µ–ø–∏–ø–µ–¥
            ax6 = plt.subplot(3, 4, 6)
            # –ü–µ—Ä–µ–¥–Ω—è—è –≥—Ä–∞–Ω—å
            ax6.plot([0.1, 0.7, 0.7, 0.1, 0.1], [0.2, 0.2, 0.5, 0.5, 0.2], 'r-', linewidth=2)
            # –ó–∞–¥–Ω—è—è –≥—Ä–∞–Ω—å
            ax6.plot([0.3, 0.9, 0.9, 0.3, 0.3], [0.4, 0.4, 0.7, 0.7, 0.4], 'r-', linewidth=2)
            # –°–æ–µ–¥–∏–Ω—è—é—â–∏–µ —Ä—ë–±—Ä–∞
            ax6.plot([0.1, 0.3], [0.2, 0.4], 'r-', linewidth=2)
            ax6.plot([0.7, 0.9], [0.2, 0.4], 'r-', linewidth=2)
            ax6.plot([0.7, 0.9], [0.5, 0.7], 'r-', linewidth=2)
            ax6.plot([0.1, 0.3], [0.5, 0.7], 'r-', linewidth=2)
            ax6.text(0.5, 0.1, 'V = a √ó b √ó c', fontsize=12, ha='center', fontweight='bold')
            ax6.set_title('–ü–∞—Ä–∞–ª–ª–µ–ª–µ–ø–∏–ø–µ–¥')
            ax6.set_aspect('equal')
            ax6.set_xticks([])
            ax6.set_yticks([])
            
            # –¶–∏–ª–∏–Ω–¥—Ä
            ax7 = plt.subplot(3, 4, 7)
            # –û—Å–Ω–æ–≤–∞–Ω–∏—è
            theta = np.linspace(0, 2*np.pi, 50)
            x_base1 = 0.5 + 0.2 * np.cos(theta)
            y_base1 = 0.3 + 0.1 * np.sin(theta)  # –≠–ª–ª–∏–ø—Å –¥–ª—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã
            x_base2 = 0.5 + 0.2 * np.cos(theta)
            y_base2 = 0.7 + 0.1 * np.sin(theta)
            ax7.plot(x_base1, y_base1, 'g-', linewidth=2)
            ax7.plot(x_base2, y_base2, 'g-', linewidth=2)
            # –ë–æ–∫–æ–≤—ã–µ –ª–∏–Ω–∏–∏
            ax7.plot([0.3, 0.3], [0.3, 0.7], 'g-', linewidth=2)
            ax7.plot([0.7, 0.7], [0.3, 0.7], 'g-', linewidth=2)
            ax7.text(0.5, 0.1, 'V = œÄ √ó r¬≤ √ó h', fontsize=12, ha='center', fontweight='bold')
            ax7.set_title('–¶–∏–ª–∏–Ω–¥—Ä')
            ax7.set_aspect('equal')
            ax7.set_xticks([])
            ax7.set_yticks([])
            
            # –ö–æ–Ω—É—Å
            ax8 = plt.subplot(3, 4, 8)
            # –û—Å–Ω–æ–≤–∞–Ω–∏–µ
            x_base = 0.5 + 0.25 * np.cos(theta)
            y_base = 0.2 + 0.1 * np.sin(theta)
            ax8.plot(x_base, y_base, 'orange', linewidth=2)
            # –°—Ç–æ—Ä–æ–Ω—ã –∫–æ–Ω—É—Å–∞
            ax8.plot([0.25, 0.5], [0.2, 0.8], 'orange', linewidth=2)
            ax8.plot([0.75, 0.5], [0.2, 0.8], 'orange', linewidth=2)
            ax8.text(0.5, 0.05, 'V = ‚Öì √ó œÄ √ó r¬≤ √ó h', fontsize=12, ha='center', fontweight='bold')
            ax8.set_title('–ö–æ–Ω—É—Å')
            ax8.set_aspect('equal')
            ax8.set_xticks([])
            ax8.set_yticks([])
            
            # –°—Ñ–µ—Ä–∞
            ax9 = plt.subplot(3, 4, 9)
            # –í–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç—É—Ä
            x_sphere = 0.5 + 0.3 * np.cos(theta)
            y_sphere = 0.5 + 0.3 * np.sin(theta)
            ax9.plot(x_sphere, y_sphere, 'purple', linewidth=2)
            # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±—ä—ë–º–∞
            for r in [0.1, 0.2]:
                x_inner = 0.5 + r * np.cos(theta)
                y_inner = 0.5 + r * np.sin(theta)
                ax9.plot(x_inner, y_inner, 'purple', linewidth=1, alpha=0.5)
            ax9.text(0.5, 0.1, 'V = ‚Å¥‚ÅÑ‚ÇÉ √ó œÄ √ó r¬≥', fontsize=12, ha='center', fontweight='bold')
            ax9.set_title('–°—Ñ–µ—Ä–∞')
            ax9.set_aspect('equal')
            ax9.set_xticks([])
            ax9.set_yticks([])
            
            # –ü–∏—Ä–∞–º–∏–¥–∞
            ax10 = plt.subplot(3, 4, 10)
            # –û—Å–Ω–æ–≤–∞–Ω–∏–µ (–∫–≤–∞–¥—Ä–∞—Ç)
            ax10.plot([0.2, 0.8, 0.8, 0.2, 0.2], [0.2, 0.2, 0.8, 0.8, 0.2], 'cyan', linewidth=2)
            # –†—ë–±—Ä–∞ –∫ –≤–µ—Ä—à–∏–Ω–µ
            ax10.plot([0.2, 0.5], [0.2, 0.9], 'cyan', linewidth=2)
            ax10.plot([0.8, 0.5], [0.2, 0.9], 'cyan', linewidth=2)
            ax10.plot([0.8, 0.5], [0.8, 0.9], 'cyan', linewidth=2)
            ax10.plot([0.2, 0.5], [0.8, 0.9], 'cyan', linewidth=2)
            ax10.text(0.5, 0.05, 'V = ‚Öì √ó S_–æ—Å–Ω √ó h', fontsize=12, ha='center', fontweight='bold')
            ax10.set_title('–ü–∏—Ä–∞–º–∏–¥–∞')
            ax10.set_aspect('equal')
            ax10.set_xticks([])
            ax10.set_yticks([])
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ—Å–µ–π
            for i in range(1, 11):
                ax = plt.subplot(3, 4, i)
                ax.set_xlim(0, 1)
                ax.set_ylim(0, 1)
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            filename = os.path.join(self.temp_dir, 'areas_volumes_diagram.png')
            plt.savefig(filename, dpi=150, bbox_inches='tight')
            plt.close()
            
            self._log(f"–î–∏–∞–≥—Ä–∞–º–º–∞ –ø–ª–æ—â–∞–¥–µ–π –∏ –æ–±—ä—ë–º–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}", "SUCCESS")
            return filename
            
        except Exception as e:
            self._log(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã –ø–ª–æ—â–∞–¥–µ–π –∏ –æ–±—ä—ë–º–æ–≤: {e}", "ERROR")
            return None
    
    def generate_coordinate_geometry_diagram(self) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏"""
        try:
            self._log("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏")
            
            fig, axes = plt.subplots(2, 2, figsize=(14, 12))
            fig.suptitle('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è', fontsize=16, fontweight='bold')
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –û—Å–Ω–æ–≤—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            ax = axes[0,0]
            ax.axhline(y=0, color='k', linewidth=1)
            ax.axvline(x=0, color='k', linewidth=1)
            ax.grid(True, alpha=0.3)
            
            # –¢–æ—á–∫–∏
            points = [(2, 3), (-1, 2), (-2, -1), (3, -2)]
            labels = ['A(2, 3)', 'B(-1, 2)', 'C(-2, -1)', 'D(3, -2)']
            colors = ['red', 'blue', 'green', 'purple']
            
            for (x, y), label, color in zip(points, labels, colors):
                ax.plot(x, y, 'o', color=color, markersize=8)
                ax.annotate(label, (x, y), xytext=(5, 5), textcoords='offset points')
            
            ax.set_xlim(-4, 4)
            ax.set_ylim(-4, 4)
            ax.set_xlabel('x')
            ax.set_ylabel('y')
            ax.set_title('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å')
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
            ax = axes[0,1]
            ax.axhline(y=0, color='k', linewidth=1)
            ax.axvline(x=0, color='k', linewidth=1)
            ax.grid(True, alpha=0.3)
            
            # –î–≤–µ —Ç–æ—á–∫–∏
            x1, y1 = 1, 1
            x2, y2 = 4, 3
            ax.plot([x1, x2], [y1, y2], 'r-', linewidth=2, label='–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ')
            ax.plot(x1, y1, 'bo', markersize=8)
            ax.plot(x2, y2, 'bo', markersize=8)
            ax.annotate(f'A({x1}, {y1})', (x1, y1), xytext=(-10, 10), textcoords='offset points')
            ax.annotate(f'B({x2}, {y2})', (x2, y2), xytext=(5, 5), textcoords='offset points')
            
            # –§–æ—Ä–º—É–ª–∞
            ax.text(2.5, 0.5, f'd = ‚àö[(x‚ÇÇ-x‚ÇÅ)¬≤ + (y‚ÇÇ-y‚ÇÅ)¬≤]', fontsize=12, 
                   bbox=dict(boxstyle="round,pad=0.3", facecolor="yellow", alpha=0.7))
            
            ax.set_xlim(-1, 5)
            ax.set_ylim(-1, 4)
            ax.set_xlabel('x')
            ax.set_ylabel('y')
            ax.set_title('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏')
            
            # –ì—Ä–∞—Ñ–∏–∫ 3: –£—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä—è–º–æ–π
            ax = axes[1,0]
            ax.axhline(y=0, color='k', linewidth=1)
            ax.axvline(x=0, color='k', linewidth=1)
            ax.grid(True, alpha=0.3)
            
            # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä—è–º—ã–µ
            x = np.linspace(-3, 3, 100)
            
            # y = 2x + 1
            y1 = 2*x + 1
            ax.plot(x, y1, 'r-', linewidth=2, label='y = 2x + 1')
            
            # y = -x + 2
            y2 = -x + 2
            ax.plot(x, y2, 'b-', linewidth=2, label='y = -x + 2')
            
            # y = 0.5x - 1
            y3 = 0.5*x - 1
            ax.plot(x, y3, 'g-', linewidth=2, label='y = 0.5x - 1')
            
            ax.set_xlim(-3, 3)
            ax.set_ylim(-3, 4)
            ax.set_xlabel('x')
            ax.set_ylabel('y')
            ax.set_title('–£—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä—è–º—ã—Ö')
            ax.legend()
            
            # –ì—Ä–∞—Ñ–∏–∫ 4: –ü–∞—Ä–∞–±–æ–ª–∞ –∏ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å
            ax = axes[1,1]
            ax.axhline(y=0, color='k', linewidth=1)
            ax.axvline(x=0, color='k', linewidth=1)
            ax.grid(True, alpha=0.3)
            
            # –ü–∞—Ä–∞–±–æ–ª–∞ y = x¬≤/2
            x_par = np.linspace(-3, 3, 100)
            y_par = x_par**2 / 2
            ax.plot(x_par, y_par, 'r-', linewidth=2, label='y = x¬≤/2')
            
            # –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å x¬≤ + y¬≤ = 4
            theta = np.linspace(0, 2*np.pi, 100)
            x_circle = 2 * np.cos(theta)
            y_circle = 2 * np.sin(theta)
            ax.plot(x_circle, y_circle, 'b-', linewidth=2, label='x¬≤ + y¬≤ = 4')
            
            ax.set_xlim(-3, 3)
            ax.set_ylim(-1, 5)
            ax.set_xlabel('x')
            ax.set_ylabel('y')
            ax.set_title('–ü–∞—Ä–∞–±–æ–ª–∞ –∏ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å')
            ax.legend()
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            filename = os.path.join(self.temp_dir, 'coordinate_geometry_diagram.png')
            plt.savefig(filename, dpi=150, bbox_inches='tight')
            plt.close()
            
            self._log(f"–î–∏–∞–≥—Ä–∞–º–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}", "SUCCESS")
            return filename
            
        except Exception as e:
            self._log(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏: {e}", "ERROR")
            return None
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            import shutil
            if os.path.exists(self.temp_dir):
                shutil.rmtree(self.temp_dir)
                self._log(f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã: {self.temp_dir}", "SUCCESS")
        except Exception as e:
            self._log(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}", "ERROR")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
math_image_generator = None

def get_math_image_generator():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    global math_image_generator
    if math_image_generator is None:
        math_image_generator = MathImageGenerator()
    return math_image_generator
