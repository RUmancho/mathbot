import telebot
import config
import core
from core import Process, FileSender
import keyboards
import database
from theory import handler as theory
from sqlalchemy import and_ as SQL_AND
import datetime
from colorama import Fore, Back, Style, init

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º colorama
init(autoreset=True)

POLLING_TIMEOUT = 60
POLLING_NONE_STOP = True

bot = telebot.TeleBot(config.BOT_TOKEN)

Process.set_bot(bot)
FileSender.set_bot(bot)

START_COMMANDS = ["/start", "/–≥–ª–∞–≤–Ω–∞—è", "/–º–µ–Ω—é", "/menu", "/main", "/home", "—Å—Ç–∞—Ä—Ç", "–≥–ª–∞–≤–Ω–∞—è"]
HELP_COMMANDS = ["–ø–æ–º–æ—â—å", "help", "/help"]

# –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ (flow)
FLOW_CANCEL = "–æ—Ç–º–µ–Ω–∞"
FLOW_DELETE = "delete_profile"
FLOW_SEARCH = "search_student"
FLOW_REGISTER_STUDENT = "register_student"
FLOW_REGISTER_TEACHER = "register_teacher"
FLOW_SEND_APPLICATION = "send_application"
FLOW_MANAGE_APPLICATIONS = "manage_applications"

# –ü–∞–º—è—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤ —Ä–∞–Ω—Ç–∞–π–º–µ: chat_id -> {"type": str, "step": str, "data": dict}
ACTIVE_FLOWS: dict[str, dict] = {}


def _log(message: str, chat_id: str = None, level: str = "INFO"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–æ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π, —Ü–≤–µ—Ç–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏."""
    try:
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        chat_info = f" [Chat: {chat_id}]" if chat_id else ""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if level == "INFO":
            color = Fore.CYAN
            emoji = "‚ÑπÔ∏è"
        elif level == "WARNING":
            color = Fore.YELLOW
            emoji = "‚ö†Ô∏è"
        elif level == "ERROR":
            color = Fore.RED
            emoji = "‚ùå"
        elif level == "SUCCESS":
            color = Fore.GREEN
            emoji = "‚úÖ"
        elif level == "DEBUG":
            color = Fore.MAGENTA
            emoji = "üîç"
        else:
            color = Fore.WHITE
            emoji = "üìù"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        timestamp_colored = f"{Fore.BLUE}[{timestamp}]"
        level_colored = f"{color}[{emoji} {level}]"
        chat_colored = f"{Fore.GREEN}{chat_info}" if chat_id else ""
        message_colored = f"{Style.BRIGHT}{message}{Style.RESET_ALL}"
        
        print(f"{timestamp_colored} {level_colored}{chat_colored} {message_colored}")
    except Exception as e:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}{Style.RESET_ALL}")


def _out(bot_instance, chat_id: str, text: str, kb=None):
    try:
        bot_instance.send_message(chat_id, text, reply_markup=kb)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")


def _handle_theory(request: str, bot_instance, chat_id: str) -> bool:
    try:
        def text_out(text: str, kb=None):
            _out(bot_instance, chat_id, text, kb)
        return bool(theory(request, text_out, chat_id, bot_instance))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–æ—Ä–∏–∏: {e}")
        return False


def _show_teacher_students(bot_instance, chat_id: str):
    try:
        me = database.Client(chat_id)
        attached = getattr(me, "my_students", None)
        if not attached:
            _out(bot_instance, chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤", keyboards.Teacher.main)
            return
        ids = attached.split(";")[:-1]
        if not ids:
            _out(bot_instance, chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤", keyboards.Teacher.main)
            return
        lines = ["–í–∞—à–∏ —É—á–µ–Ω–∏–∫–∏:", ""]
        for sid in ids:
            st = database.Client(sid)
            school = f"—à–∫–æ–ª–∞ ‚Ññ{st.school}" if getattr(st, "school", None) else "—à–∫–æ–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            grade = f"{st.grade} –∫–ª–∞—Å—Å" if getattr(st, "grade", None) else "–∫–ª–∞—Å—Å –Ω–µ —É–∫–∞–∑–∞–Ω"
            lines.append(f"‚Ä¢ {st.name} {st.surname} ({school}, {grade})")
        _out(bot_instance, chat_id, "\n".join(lines), keyboards.Teacher.main)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É—á–µ–Ω–∏–∫–æ–≤: {e}")
        _out(bot_instance, chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤", keyboards.Teacher.main)


def _start_delete_flow(chat_id: str) -> None:
    try:
        ACTIVE_FLOWS[chat_id] = {"type": FLOW_DELETE, "step": "ask_password", "data": {}}
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")


def _handle_delete_flow(request: str, chat_id: str) -> bool:
    try:
        flow = ACTIVE_FLOWS.get(chat_id)
        if not flow or flow.get("type") != FLOW_DELETE:
            return False
        if request == FLOW_CANCEL:
            ACTIVE_FLOWS.pop(chat_id, None)
            _out(bot, chat_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return True

        step = flow.get("step")
        if step == "ask_password":
            _out(bot, chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
            flow["step"] = "verify_password"
            return True
        if step == "verify_password":
            # –°–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
            me = database.Client(chat_id)
            if request == (me.password or ""):
                deleted = database.Manager.delete_record(database.Tables.Users, "telegram_id", chat_id)
                if deleted:
                    _out(bot, chat_id, "–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª—ë–Ω")
                else:
                    _out(bot, chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
                ACTIVE_FLOWS.pop(chat_id, None)
                return True
            else:
                _out(bot, chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'")
                return True
        return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        ACTIVE_FLOWS.pop(chat_id, None)
        _out(bot, chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è")
        return True


def _start_search_flow(chat_id: str) -> None:
    try:
        ACTIVE_FLOWS[chat_id] = {"type": FLOW_SEARCH, "step": "ask_city", "data": {}}
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–∏—Å–∫–∞: {e}")

def _start_registration_flow(chat_id: str, role: str) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–∞ –∏–ª–∏ —É—á–∏—Ç–µ–ª—è"""
    try:
        flow_type = FLOW_REGISTER_STUDENT if role == "—É—á–µ–Ω–∏–∫" else FLOW_REGISTER_TEACHER
        ACTIVE_FLOWS[chat_id] = {
            "type": flow_type, 
            "step": "ask_name", 
            "data": {"role": role}
        }
        _log(f"üöÄ –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {role}", chat_id, "SUCCESS")
    except Exception as e:
        _log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {e}", chat_id, "ERROR")
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")


def _handle_search_flow(request: str, chat_id: str) -> bool:
    try:
        flow = ACTIVE_FLOWS.get(chat_id)
        if not flow or flow.get("type") != FLOW_SEARCH:
            return False
        if request == FLOW_CANCEL:
            ACTIVE_FLOWS.pop(chat_id, None)
            _out(bot, chat_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return True

        step = flow.get("step")
        data = flow.get("data")

        if step == "ask_city":
            _out(bot, chat_id, "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —É—á–∞—Ç—Å—è —É—á–∞—â–∏–µ—Å—è? (–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞)")
            flow["step"] = "verify_city"
            return True
        if step == "verify_city":
            if core.Validator.city(request):
                data["city"] = request
                flow["step"] = "ask_school"
            else:
                _out(bot, chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'")
                return True
        if step == "ask_school":
            _out(bot, chat_id, "–í –∫–∞–∫–æ–π —à–∫–æ–ª–µ?")
            flow["step"] = "verify_school"
            return True
        if step == "verify_school":
            if core.Validator.school(request):
                try:
                    value = int(request.split(" ")[-1])
                except Exception:
                    value = request
                data["school"] = value
                flow["step"] = "ask_class"
            else:
                _out(bot, chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —à–∫–æ–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'")
                return True
        if step == "ask_class":
            _out(bot, chat_id, "–í –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ? (–Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ –∏ –±—É–∫–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 7–ê)")
            flow["step"] = "verify_class"
            return True
        if step == "verify_class":
            if core.Validator.class_number(request):
                data["class_number"] = request
                # –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫
                condition = SQL_AND(
                    database.Tables.Users.city == data.get("city"),
                    database.Tables.Users.school == data.get("school"),
                    database.Tables.Users.grade == data.get("class_number"),
                )
                results = database.Manager.search_records(database.Tables.Users, condition)
                if results:
                    lines = []
                    for row in results:
                        try:
                            st = database.Client(row["telegram_id"])
                            lines.append(f"{st.name} {st.surname}")
                        except Exception:
                            continue
                    text = "\n".join(lines) if lines else "–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                    _out(bot, chat_id, text, keyboards.Teacher.attached)
                else:
                    _out(bot, chat_id, "–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                ACTIVE_FLOWS.pop(chat_id, None)
                return True
            else:
                _out(bot, chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'")
                return True
        return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ–∏—Å–∫–∞: {e}")
        ACTIVE_FLOWS.pop(chat_id, None)
        _out(bot, chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ —É—á–µ–Ω–∏–∫–æ–≤")
        return True

def _handle_registration_flow(request: str, chat_id: str) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        flow = ACTIVE_FLOWS.get(chat_id)
        if not flow or flow.get("type") not in [FLOW_REGISTER_STUDENT, FLOW_REGISTER_TEACHER]:
            return False
        
        # –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if request == FLOW_CANCEL:
            ACTIVE_FLOWS.pop(chat_id, None)
            _log("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", chat_id, "WARNING")
            _out(bot, chat_id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", keyboards.Guest.main)
            return True

        step = flow.get("step")
        data = flow.get("data", {})
        role = data.get("role")
        
        _log(f"üìù –®–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {step}, —Ä–æ–ª—å: {role}", chat_id, "DEBUG")

        # –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
        if step == "ask_name":
            _out(bot, chat_id, f"üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–∫ {role}\n\nüî∏ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", keyboards.cancel)
            flow["step"] = "get_name"
            return True
        
        # –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏, –∑–∞–ø—Ä–æ—Å —Ñ–∞–º–∏–ª–∏–∏
        elif step == "get_name":
            if not request or len(request.strip()) < 2:
                _out(bot, chat_id, "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", keyboards.cancel)
                return True
            
            data["name"] = request.strip().title()
            _log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏–º—è: {data['name']}", chat_id, "SUCCESS")
            _out(bot, chat_id, f"‚úÖ –ò–º—è: {data['name']}\n\nüî∏ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:", keyboards.cancel)
            flow["step"] = "get_surname"
            return True
        
        # –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏, –∑–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è
        elif step == "get_surname":
            if not request or len(request.strip()) < 2:
                _out(bot, chat_id, "‚ùå –§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", keyboards.cancel)
                return True
            
            data["surname"] = request.strip().title()
            _log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–∞–º–∏–ª–∏—è: {data['surname']}", chat_id, "SUCCESS")
            _out(bot, chat_id, f"‚úÖ –§–∞–º–∏–ª–∏—è: {data['surname']}\n\nüî∏ –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):", keyboards.cancel)
            flow["step"] = "get_password"
            return True
        
        # –®–∞–≥ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
        elif step == "get_password":
            if not request or len(request.strip()) < 6:
                _out(bot, chat_id, "‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", keyboards.cancel)
                return True
            
            data["password"] = request.strip()
            _log("‚úÖ –ü–∞—Ä–æ–ª—å –ø–æ–ª—É—á–µ–Ω", chat_id, "SUCCESS")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º –¥–ª—è —Ä–æ–ª–∏ —à–∞–≥–∞–º
            if role == "—É—á–µ–Ω–∏–∫":
                _out(bot, chat_id, f"‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n\nüî∏ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:", keyboards.cancel)
                flow["step"] = "get_city"
            else:  # —É—á–∏—Ç–µ–ª—å
                _out(bot, chat_id, f"‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n\nüî∏ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–µ–ø–æ–¥–∞–µ—Ç–µ:", keyboards.cancel)
                flow["step"] = "get_subject"
            return True
        
        # –®–∞–≥–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–∞
        elif step == "get_city" and role == "—É—á–µ–Ω–∏–∫":
            if not request or len(request.strip()) < 2:
                _out(bot, chat_id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", keyboards.cancel)
                return True
            
            data["city"] = request.strip().title()
            _log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –≥–æ—Ä–æ–¥: {data['city']}", chat_id, "SUCCESS")
            _out(bot, chat_id, f"‚úÖ –ì–æ—Ä–æ–¥: {data['city']}\n\nüî∏ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —à–∫–æ–ª—ã (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):", keyboards.cancel)
            flow["step"] = "get_school"
            return True
        
        elif step == "get_school" and role == "—É—á–µ–Ω–∏–∫":
            try:
                school_num = int(request.strip())
                if school_num <= 0:
                    raise ValueError()
            except ValueError:
                _out(bot, chat_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —à–∫–æ–ª—ã (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):", keyboards.cancel)
                return True
            
            data["school"] = school_num
            _log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —à–∫–æ–ª–∞: {data['school']}", chat_id, "SUCCESS")
            _out(bot, chat_id, f"‚úÖ –®–∫–æ–ª–∞: {data['school']}\n\nüî∏ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 9–ê, 11–ë):", keyboards.cancel)
            flow["step"] = "get_grade"
            return True
        
        elif step == "get_grade" and role == "—É—á–µ–Ω–∏–∫":
            if not request or len(request.strip()) < 1:
                _out(bot, chat_id, "‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", keyboards.cancel)
                return True
            
            data["grade"] = request.strip().upper()
            _log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–ª–∞—Å—Å: {data['grade']}", chat_id, "SUCCESS")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É—á–µ–Ω–∏–∫–∞
            return _complete_student_registration(chat_id, data)
        
        # –®–∞–≥–∏ –¥–ª—è —É—á–∏—Ç–µ–ª—è
        elif step == "get_subject" and role == "—É—á–∏—Ç–µ–ª—å":
            if not request or len(request.strip()) < 2:
                _out(bot, chat_id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", keyboards.cancel)
                return True
            
            data["subject"] = request.strip().title()
            _log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: {data['subject']}", chat_id, "SUCCESS")
            _out(bot, chat_id, f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç: {data['subject']}\n\nüî∏ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:", keyboards.cancel)
            flow["step"] = "get_teacher_city"
            return True
        
        elif step == "get_teacher_city" and role == "—É—á–∏—Ç–µ–ª—å":
            if not request or len(request.strip()) < 2:
                _out(bot, chat_id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", keyboards.cancel)
                return True
            
            data["city"] = request.strip().title()
            _log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –≥–æ—Ä–æ–¥: {data['city']}", chat_id, "SUCCESS")
            _out(bot, chat_id, f"‚úÖ –ì–æ—Ä–æ–¥: {data['city']}\n\nüî∏ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —à–∫–æ–ª—ã (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):", keyboards.cancel)
            flow["step"] = "get_teacher_school"
            return True
        
        elif step == "get_teacher_school" and role == "—É—á–∏—Ç–µ–ª—å":
            try:
                school_num = int(request.strip())
                if school_num <= 0:
                    raise ValueError()
            except ValueError:
                _out(bot, chat_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —à–∫–æ–ª—ã (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):", keyboards.cancel)
                return True
            
            data["school"] = school_num
            _log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —à–∫–æ–ª–∞: {data['school']}", chat_id, "SUCCESS")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É—á–∏—Ç–µ–ª—è
            return _complete_teacher_registration(chat_id, data)
        
        return False
        
    except Exception as e:
        _log(f"üí• –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}", chat_id, "ERROR")
        ACTIVE_FLOWS.pop(chat_id, None)
        _out(bot, chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", keyboards.Guest.main)
        return True

def _complete_student_registration(chat_id: str, data: dict) -> bool:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É—á–µ–Ω–∏–∫–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ë–î"""
    try:
        _log("üìù –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–µ–Ω–∏–∫–∞...", chat_id, "SUCCESS")
        
        # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å (–ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä, –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ bcrypt)
        import hashlib
        password_hash = hashlib.sha256(data["password"].encode()).hexdigest()
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = database.Tables.Users(
            telegram_id=chat_id,
            username=None,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
            password=password_hash,
            name=data["name"],
            surname=data["surname"],
            role="—É—á–µ–Ω–∏–∫",
            city=data["city"],
            school=data["school"],
            grade=data["grade"],
            my_teachers=None,
            application=None
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        success = database.Manager.write(user)
        
        if success:
            ACTIVE_FLOWS.pop(chat_id, None)
            _log("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–µ–Ω–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", chat_id, "SUCCESS")
            
            welcome_text = f"""üéâ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**

üë§ **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ –ò–º—è: {data['name']} {data['surname']}
‚Ä¢ –†–æ–ª—å: –£—á–µ–Ω–∏–∫
‚Ä¢ –ì–æ—Ä–æ–¥: {data['city']}
‚Ä¢ –®–∫–æ–ª–∞: ‚Ññ{data['school']}
‚Ä¢ –ö–ª–∞—Å—Å: {data['grade']}

üìö –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ò–∑—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∞–ª–≥–µ–±—Ä–µ –∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏
‚Ä¢ –ò—Å–∫–∞—Ç—å —É—á–∏—Ç–µ–ª–µ–π –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –æ—Ç —É—á–∏—Ç–µ–ª–µ–π

üîç –î–ª—è –ø–æ–∏—Å–∫–∞ —É—á–∏—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "–∑–∞—è–≤–∫–∏" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."""
            
            _out(bot, chat_id, welcome_text, keyboards.Student.main)
            return True
        else:
            _log("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞ –≤ –ë–î", chat_id, "ERROR")
            _out(bot, chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", keyboards.Guest.main)
            ACTIVE_FLOWS.pop(chat_id, None)
            return True
            
    except Exception as e:
        _log(f"üí• –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–µ–Ω–∏–∫–∞: {e}", chat_id, "ERROR")
        _out(bot, chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", keyboards.Guest.main)
        ACTIVE_FLOWS.pop(chat_id, None)
        return True

def _complete_teacher_registration(chat_id: str, data: dict) -> bool:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É—á–∏—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ë–î"""
    try:
        _log("üéì –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∏—Ç–µ–ª—è...", chat_id, "SUCCESS")
        
        # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        import hashlib
        password_hash = hashlib.sha256(data["password"].encode()).hexdigest()
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —É—á–∏—Ç–µ–ª—è –¥–æ–±–∞–≤–ª—è–µ–º subject –≤ –ø–æ–ª–µ city –≤—Ä–µ–º–µ–Ω–Ω–æ)
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
        user = database.Tables.Users(
            telegram_id=chat_id,
            username=None,
            password=password_hash,
            name=data["name"],
            surname=data["surname"],
            role="—É—á–∏—Ç–µ–ª—å",
            city=f"{data['city']} - {data['subject']}",  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            school=data["school"],
            grade=None,  # –£—á–∏—Ç–µ–ª—è–º –Ω–µ –Ω—É–∂–µ–Ω –∫–ª–∞—Å—Å
            my_students=None,
            application=None
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        success = database.Manager.write(user)
        
        if success:
            ACTIVE_FLOWS.pop(chat_id, None)
            _log("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∏—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", chat_id, "SUCCESS")
            
            welcome_text = f"""üéâ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**

üë®‚Äçüè´ **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ –ò–º—è: {data['name']} {data['surname']}
‚Ä¢ –†–æ–ª—å: –£—á–∏—Ç–µ–ª—å
‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç: {data['subject']}
‚Ä¢ –ì–æ—Ä–æ–¥: {data['city']}
‚Ä¢ –®–∫–æ–ª–∞: ‚Ññ{data['school']}

üìö –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫–∏ –æ—Ç —É—á–µ–Ω–∏–∫–æ–≤
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∫–ª–∞—Å—Å–∞–º–∏
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–µ—à–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–≤

üë• –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—á–µ–Ω–∏–∫–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."""
            
            _out(bot, chat_id, welcome_text, keyboards.Teacher.main)
            return True
        else:
            _log("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–∏—Ç–µ–ª—è –≤ –ë–î", chat_id, "ERROR")
            _out(bot, chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", keyboards.Guest.main)
            ACTIVE_FLOWS.pop(chat_id, None)
            return True
            
    except Exception as e:
        _log(f"üí• –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∏—Ç–µ–ª—è: {e}", chat_id, "ERROR")
        _out(bot, chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", keyboards.Guest.main)
        ACTIVE_FLOWS.pop(chat_id, None)
        return True

def _start_application_flow(chat_id: str) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ —É—á–∏—Ç–µ–ª—é"""
    try:
        ACTIVE_FLOWS[chat_id] = {
            "type": FLOW_SEND_APPLICATION, 
            "step": "search_teachers", 
            "data": {}
        }
        _log("üìù –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏", chat_id, "SUCCESS")
    except Exception as e:
        _log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞—è–≤–∫–∏: {e}", chat_id, "ERROR")
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞—è–≤–∫–∏: {e}")

def _handle_application_flow(request: str, chat_id: str) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ —É—á–µ–Ω–∏–∫–∞ —É—á–∏—Ç–µ–ª—é"""
    try:
        flow = ACTIVE_FLOWS.get(chat_id)
        if not flow or flow.get("type") != FLOW_SEND_APPLICATION:
            return False
        
        # –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏
        if request == FLOW_CANCEL:
            ACTIVE_FLOWS.pop(chat_id, None)
            _log("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", chat_id, "WARNING")
            _out(bot, chat_id, "–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞", keyboards.Student.main)
            return True

        step = flow.get("step")
        data = flow.get("data", {})
        
        _log(f"üìß –®–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: {step}", chat_id, "DEBUG")

        # –®–∞–≥ 1: –ü–æ–∏—Å–∫ —É—á–∏—Ç–µ–ª–µ–π
        if step == "search_teachers":
            student = database.Client(chat_id)
            student_city = student.city
            student_school = student.school
            
            # –ò—â–µ–º —É—á–∏—Ç–µ–ª–µ–π –≤ —Ç–æ–º –∂–µ –≥–æ—Ä–æ–¥–µ –∏ —à–∫–æ–ª–µ
            try:
                from sqlalchemy import and_ as SQL_AND
                condition = SQL_AND(
                    database.Tables.Users.role == "—É—á–∏—Ç–µ–ª—å",
                    database.Tables.Users.city.like(f"{student_city}%"),  # –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≥–æ—Ä–æ–¥–∞
                    database.Tables.Users.school == student_school
                )
                results = database.Manager.search_records(database.Tables.Users, condition)
                
                if results:
                    teachers_list = []
                    teachers_data = {}
                    
                    for i, row in enumerate(results, 1):
                        try:
                            teacher_id = row["telegram_id"]
                            teacher_name = f"{row['name']} {row['surname']}"
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –ø–æ–ª—è city (—Ñ–æ—Ä–º–∞—Ç: "–ì–æ—Ä–æ–¥ - –ü—Ä–µ–¥–º–µ—Ç")
                            city_subject = row['city']
                            subject = city_subject.split(' - ')[-1] if ' - ' in city_subject else "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
                            
                            teachers_list.append(f"{i}. {teacher_name} ({subject})")
                            teachers_data[str(i)] = {
                                "id": teacher_id,
                                "name": teacher_name,
                                "subject": subject
                            }
                        except Exception as e:
                            _log(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—á–∏—Ç–µ–ª—è: {e}", chat_id, "WARNING")
                            continue
                    
                    if teachers_list:
                        data["teachers"] = teachers_data
                        flow["step"] = "select_teacher"
                        
                        teachers_text = "\n".join(teachers_list)
                        message = f"""üë®‚Äçüè´ **–ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—á–∏—Ç–µ–ª—è –≤ –≤–∞—à–µ–π —à–∫–æ–ª–µ:**

{teachers_text}

üîπ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∏—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É:"""
                        
                        _out(bot, chat_id, message, keyboards.cancel)
                        return True
                    else:
                        _out(bot, chat_id, "‚ùå –í –≤–∞—à–µ–π —à–∫–æ–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∏—Ç–µ–ª–µ–π", keyboards.Student.main)
                        ACTIVE_FLOWS.pop(chat_id, None)
                        return True
                else:
                    _out(bot, chat_id, "‚ùå –í –≤–∞—à–µ–π —à–∫–æ–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∏—Ç–µ–ª–µ–π", keyboards.Student.main)
                    ACTIVE_FLOWS.pop(chat_id, None)
                    return True
                    
            except Exception as e:
                _log(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—á–∏—Ç–µ–ª–µ–π: {e}", chat_id, "ERROR")
                _out(bot, chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É—á–∏—Ç–µ–ª–µ–π", keyboards.Student.main)
                ACTIVE_FLOWS.pop(chat_id, None)
                return True

        # –®–∞–≥ 2: –í—ã–±–æ—Ä —É—á–∏—Ç–µ–ª—è
        elif step == "select_teacher":
            teachers = data.get("teachers", {})
            
            if request not in teachers:
                available_numbers = ", ".join(teachers.keys())
                _out(bot, chat_id, f"‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–∏—Ç–µ–ª—è ({available_numbers}) –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞':", keyboards.cancel)
                return True
            
            selected_teacher = teachers[request]
            data["selected_teacher"] = selected_teacher
            flow["step"] = "write_message"
            
            _log(f"‚úÖ –í—ã–±—Ä–∞–Ω —É—á–∏—Ç–µ–ª—å: {selected_teacher['name']}", chat_id, "SUCCESS")
            
            message = f"""‚úÖ **–í—ã–±—Ä–∞–Ω–Ω—ã–π —É—á–∏—Ç–µ–ª—å:** {selected_teacher['name']} ({selected_teacher['subject']})

üìù –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ, –ø–æ—á–µ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å —ç—Ç–∏–º —É—á–∏—Ç–µ–ª–µ–º):"""
            
            _out(bot, chat_id, message, keyboards.cancel)
            return True

        # –®–∞–≥ 3: –ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif step == "write_message":
            if not request or len(request.strip()) < 10:
                _out(bot, chat_id, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", keyboards.cancel)
                return True
            
            data["message"] = request.strip()
            flow["step"] = "confirm_send"
            
            selected_teacher = data["selected_teacher"]
            student = database.Client(chat_id)
            
            confirm_text = f"""üìã **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏:**

üë®‚Äçüè´ **–£—á–∏—Ç–µ–ª—å:** {selected_teacher['name']} ({selected_teacher['subject']})
üë§ **–û—Ç:** {student.name} {student.surname} ({student.grade} –∫–ª–∞—Å—Å)

üìù **–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**
{data['message']}

‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É? (–¥–∞/–Ω–µ—Ç)"""
            
            _out(bot, chat_id, confirm_text, keyboards.cancel)
            return True

        # –®–∞–≥ 4: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        elif step == "confirm_send":
            if request.lower() in ["–¥–∞", "yes", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"]:
                return _send_application_to_teacher(chat_id, data)
            elif request.lower() in ["–Ω–µ—Ç", "no", "–æ—Ç–º–µ–Ω–∏—Ç—å"]:
                ACTIVE_FLOWS.pop(chat_id, None)
                _out(bot, chat_id, "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞", keyboards.Student.main)
                return True
            else:
                _out(bot, chat_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã:", keyboards.cancel)
                return True

        return False
        
    except Exception as e:
        _log(f"üí• –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞—è–≤–∫–∏: {e}", chat_id, "ERROR")
        ACTIVE_FLOWS.pop(chat_id, None)
        _out(bot, chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏", keyboards.Student.main)
        return True

def _send_application_to_teacher(chat_id: str, data: dict) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É —É—á–∏—Ç–µ–ª—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î"""
    try:
        student = database.Client(chat_id)
        selected_teacher = data["selected_teacher"]
        teacher_id = selected_teacher["id"]
        message = data["message"]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î (–≤ –ø–æ–ª–µ application —É—á–µ–Ω–∏–∫–∞)
        application_data = f"TO:{teacher_id}|MSG:{message}|STATUS:pending"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ application —É —É—á–µ–Ω–∏–∫–∞
        success = database.Manager.update(
            database.Tables.Users,
            {"telegram_id": chat_id},
            {"application": application_data}
        )
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—é
            teacher_message = f"""üì® **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç —É—á–µ–Ω–∏–∫–∞!**

üë§ **–û—Ç:** {student.name} {student.surname}
üè´ **–®–∫–æ–ª–∞:** ‚Ññ{student.school}, –∫–ª–∞—Å—Å {student.grade}
üèôÔ∏è **–ì–æ—Ä–æ–¥:** {student.city}

üìù **–°–æ–æ–±—â–µ–Ω–∏–µ:**
{message}

‚úÖ –î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "–∑–∞—è–≤–∫–∏" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.
‚ùå –î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —É—á–µ–Ω–∏–∫–æ–º –Ω–∞–ø—Ä—è–º—É—é."""

            try:
                bot.send_message(teacher_id, teacher_message)
                _log(f"üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∏—Ç–µ–ª—é {teacher_id}", chat_id, "SUCCESS")
            except Exception as e:
                _log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—é: {e}", chat_id, "WARNING")
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
            ACTIVE_FLOWS.pop(chat_id, None)
            
            success_message = f"""‚úÖ **–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!**

üë®‚Äçüè´ **–£—á–∏—Ç–µ–ª—å:** {selected_teacher['name']} ({selected_teacher['subject']})

üìß –£—á–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ.
‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —É—á–∏—Ç–µ–ª—è.

üí° –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."""
            
            _out(bot, chat_id, success_message, keyboards.Student.main)
            _log("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", chat_id, "SUCCESS")
            return True
        else:
            _log("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –ë–î", chat_id, "ERROR")
            _out(bot, chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏", keyboards.Student.main)
            ACTIVE_FLOWS.pop(chat_id, None)
            return True
            
    except Exception as e:
        _log(f"üí• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: {e}", chat_id, "ERROR")
        _out(bot, chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏", keyboards.Student.main)
        ACTIVE_FLOWS.pop(chat_id, None)
        return True

def _show_applications_for_teacher(chat_id: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏ –¥–ª—è —É—á–∏—Ç–µ–ª—è"""
    try:
        # –ò—â–µ–º –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫–∏ –¥–∞–Ω–Ω–æ–º—É —É—á–∏—Ç–µ–ª—é
        from sqlalchemy import and_ as SQL_AND
        condition = SQL_AND(
            database.Tables.Users.role == "—É—á–µ–Ω–∏–∫",
            database.Tables.Users.application.like(f"%TO:{chat_id}%")
        )
        results = database.Manager.search_records(database.Tables.Users, condition)
        
        if not results:
            _out(bot, chat_id, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –æ—Ç —É—á–µ–Ω–∏–∫–æ–≤", keyboards.Teacher.main)
            return
        
        applications = []
        for i, row in enumerate(results, 1):
            try:
                student_name = f"{row['name']} {row['surname']}"
                student_id = row['telegram_id']
                grade = row['grade']
                city = row['city']
                school = row['school']
                application_data = row['application']
                
                # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
                if application_data and f"TO:{chat_id}" in application_data:
                    parts = application_data.split('|')
                    message = ""
                    status = "pending"
                    
                    for part in parts:
                        if part.startswith("MSG:"):
                            message = part[4:]
                        elif part.startswith("STATUS:"):
                            status = part[7:]
                    
                    status_emoji = "‚è≥" if status == "pending" else "‚úÖ" if status == "accepted" else "‚ùå"
                    
                    applications.append(f"""{i}. {status_emoji} **{student_name}** ({grade} –∫–ª–∞—Å—Å)
   üè´ –®–∫–æ–ª–∞ ‚Ññ{school}, {city}
   üí¨ "{message[:50]}{"..." if len(message) > 50 else ""}"
   üë§ ID: `{student_id}`""")
                    
            except Exception as e:
                _log(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏: {e}", chat_id, "WARNING")
                continue
        
        if applications:
            applications_text = "\n\n".join(applications)
            message = f"""üì® **–í–∞—à–∏ –∑–∞—è–≤–∫–∏ –æ—Ç —É—á–µ–Ω–∏–∫–æ–≤:**

{applications_text}

üí° **–ö–∞–∫ –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É:**
1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID —É—á–µ–Ω–∏–∫–∞
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ø—Ä–∏–Ω—è—Ç—å —É—á–µ–Ω–∏–∫–∞"
3. –í—Å—Ç–∞–≤—å—Ç–µ ID —É—á–µ–Ω–∏–∫–∞

‚ùå **–î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è** —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —É—á–µ–Ω–∏–∫–æ–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Telegram."""
            
            _out(bot, chat_id, message, keyboards.Teacher.main)
        else:
            _out(bot, chat_id, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫", keyboards.Teacher.main)
            
    except Exception as e:
        _log(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}", chat_id, "ERROR")
        _out(bot, chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫", keyboards.Teacher.main)

def _start_accept_student_flow(chat_id: str) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—è—Ç–∏—è —É—á–µ–Ω–∏–∫–∞"""
    try:
        ACTIVE_FLOWS[chat_id] = {
            "type": FLOW_MANAGE_APPLICATIONS, 
            "step": "get_student_id", 
            "data": {}
        }
        _log("üë• –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—è—Ç–∏—è —É—á–µ–Ω–∏–∫–∞", chat_id, "SUCCESS")
        _out(bot, chat_id, "üë• **–ü—Ä–∏–Ω—è—Ç–∏–µ —É—á–µ–Ω–∏–∫–∞**\n\nüìã –í–≤–µ–¥–∏—Ç–µ ID —É—á–µ–Ω–∏–∫–∞ (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫):", keyboards.cancel)
    except Exception as e:
        _log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—è—Ç–∏—è —É—á–µ–Ω–∏–∫–∞: {e}", chat_id, "ERROR")
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–∏–Ω—è—Ç–∏—è —É—á–µ–Ω–∏–∫–∞: {e}")

def _handle_accept_student_flow(request: str, chat_id: str) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—è—Ç–∏—è —É—á–µ–Ω–∏–∫–∞ —É—á–∏—Ç–µ–ª–µ–º"""
    try:
        flow = ACTIVE_FLOWS.get(chat_id)
        if not flow or flow.get("type") != FLOW_MANAGE_APPLICATIONS:
            return False
        
        # –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
        if request == FLOW_CANCEL:
            ACTIVE_FLOWS.pop(chat_id, None)
            _log("‚ùå –ü—Ä–∏–Ω—è—Ç–∏–µ —É—á–µ–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", chat_id, "WARNING")
            _out(bot, chat_id, "–ü—Ä–∏–Ω—è—Ç–∏–µ —É—á–µ–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", keyboards.Teacher.main)
            return True

        step = flow.get("step")
        
        if step == "get_student_id":
            student_id = request.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—á–µ–Ω–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –∑–∞—è–≤–∫—É —ç—Ç–æ–º—É —É—á–∏—Ç–µ–ª—é
            try:
                student = database.Client(student_id)
                if student.role != "—É—á–µ–Ω–∏–∫":
                    _out(bot, chat_id, "‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π ID –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —É—á–µ–Ω–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", keyboards.cancel)
                    return True
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫—É
                application_data = student.application
                if not application_data or f"TO:{chat_id}" not in application_data:
                    _out(bot, chat_id, "‚ùå –û—Ç —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–∫–∏ –¥–ª—è –≤–∞—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID:", keyboards.cancel)
                    return True
                
                # –ü—Ä–∏–Ω–∏–º–∞–µ–º —É—á–µ–Ω–∏–∫–∞
                return _accept_student(chat_id, student_id, student)
                
            except Exception as e:
                _log(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–µ–Ω–∏–∫–∞: {e}", chat_id, "ERROR")
                _out(bot, chat_id, "‚ùå –£—á–µ–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID:", keyboards.cancel)
                return True

        return False
        
    except Exception as e:
        _log(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —É—á–µ–Ω–∏–∫–∞: {e}", chat_id, "ERROR")
        ACTIVE_FLOWS.pop(chat_id, None)
        _out(bot, chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —É—á–µ–Ω–∏–∫–∞", keyboards.Teacher.main)
        return True

def _accept_student(teacher_id: str, student_id: str, student) -> bool:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —É—á–µ–Ω–∏–∫–∞ - –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤—è–∑–∏ –≤ –ë–î"""
    try:
        teacher = database.Client(teacher_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º my_teachers —É —É—á–µ–Ω–∏–∫–∞
        current_teachers = student.my_teachers or ""
        if teacher_id not in current_teachers:
            new_teachers = f"{current_teachers},{teacher_id}" if current_teachers else teacher_id
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ accepted
            application_parts = student.application.split('|')
            new_application_parts = []
            for part in application_parts:
                if part.startswith("STATUS:"):
                    new_application_parts.append("STATUS:accepted")
                else:
                    new_application_parts.append(part)
            new_application = "|".join(new_application_parts)
            
            success_student = database.Manager.update(
                database.Tables.Users,
                {"telegram_id": student_id},
                {"my_teachers": new_teachers, "application": new_application}
            )
        else:
            success_student = True  # –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω
        
        # –û–±–Ω–æ–≤–ª—è–µ–º my_students —É —É—á–∏—Ç–µ–ª—è
        current_students = teacher.my_students or ""
        if student_id not in current_students:
            new_students = f"{current_students},{student_id}" if current_students else student_id
            success_teacher = database.Manager.update(
                database.Tables.Users,
                {"telegram_id": teacher_id},
                {"my_students": new_students}
            )
        else:
            success_teacher = True  # –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω
        
        if success_student and success_teacher:
            ACTIVE_FLOWS.pop(teacher_id, None)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∏—Ç–µ–ª—è
            teacher_message = f"""‚úÖ **–£—á–µ–Ω–∏–∫ –ø—Ä–∏–Ω—è—Ç!**

üë§ **–£—á–µ–Ω–∏–∫:** {student.name} {student.surname}
üè´ **–®–∫–æ–ª–∞:** ‚Ññ{student.school}, –∫–ª–∞—Å—Å {student.grade}
üèôÔ∏è **–ì–æ—Ä–æ–¥:** {student.city}

üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞–Ω–∏—è —ç—Ç–æ–º—É —É—á–µ–Ω–∏–∫—É!
üìö –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."""
            
            _out(bot, teacher_id, teacher_message, keyboards.Teacher.main)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–µ–Ω–∏–∫–∞
            try:
                teacher_city_subject = teacher.city
                subject = teacher_city_subject.split(' - ')[-1] if ' - ' in teacher_city_subject else "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
                
                student_message = f"""üéâ **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!**

üë®‚Äçüè´ **–£—á–∏—Ç–µ–ª—å:** {teacher.name} {teacher.surname} ({subject})
üè´ **–®–∫–æ–ª–∞:** ‚Ññ{teacher.school}

üìö –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –æ—Ç —ç—Ç–æ–≥–æ —É—á–∏—Ç–µ–ª—è!
üí° –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –±–æ—Ç–µ."""
                
                bot.send_message(student_id, student_message)
                _log(f"üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–µ–Ω–∏–∫—É {student_id}", teacher_id, "SUCCESS")
            except Exception as e:
                _log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É: {e}", teacher_id, "WARNING")
            
            _log(f"‚úÖ –£—á–µ–Ω–∏–∫ {student_id} –ø—Ä–∏–Ω—è—Ç —É—á–∏—Ç–µ–ª–µ–º {teacher_id}", teacher_id, "SUCCESS")
            return True
        else:
            _log("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —É—á–µ–Ω–∏–∫–∞", teacher_id, "ERROR")
            _out(bot, teacher_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —É—á–µ–Ω–∏–∫–∞", keyboards.Teacher.main)
            ACTIVE_FLOWS.pop(teacher_id, None)
            return True
            
    except Exception as e:
        _log(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —É—á–µ–Ω–∏–∫–∞: {e}", teacher_id, "ERROR")
        _out(bot, teacher_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —É—á–µ–Ω–∏–∫–∞", keyboards.Teacher.main)
        ACTIVE_FLOWS.pop(teacher_id, None)
        return True

def _show_my_teachers(chat_id: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π —É—á–µ–Ω–∏–∫–∞"""
    try:
        student = database.Client(chat_id)
        teachers_ids = student.my_teachers
        
        if not teachers_ids:
            message = """üë®‚Äçüè´ **–ú–æ–∏ —É—á–∏—Ç–µ–ª—è**

üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —É—á–∏—Ç–µ–ª–µ–π.

üí° **–ö–∞–∫ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å—Å—è –∫ —É—á–∏—Ç–µ–ª—é:**
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "–∑–∞—è–≤–∫–∏"
2. –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∏—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É
4. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–∏–Ω—è—Ç–∏—è –æ—Ç —É—á–∏—Ç–µ–ª—è"""
            
            _out(bot, chat_id, message, keyboards.Student.main)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∏—Ç–µ–ª—è—Ö
        teacher_list = []
        teacher_ids_array = teachers_ids.split(',')
        
        for teacher_id in teacher_ids_array:
            if teacher_id.strip():
                try:
                    teacher = database.Client(teacher_id.strip())
                    teacher_city_subject = teacher.city
                    subject = teacher_city_subject.split(' - ')[-1] if ' - ' in teacher_city_subject else "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
                    
                    teacher_list.append(f"üë®‚Äçüè´ **{teacher.name} {teacher.surname}**")
                    teacher_list.append(f"   üìö –ü—Ä–µ–¥–º–µ—Ç: {subject}")
                    teacher_list.append(f"   üè´ –®–∫–æ–ª–∞: ‚Ññ{teacher.school}")
                    teacher_list.append(f"   üìû ID: `{teacher_id.strip()}`")
                    teacher_list.append("")
                    
                except Exception as e:
                    _log(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—á–∏—Ç–µ–ª—è {teacher_id}: {e}", chat_id, "WARNING")
                    continue
        
        if teacher_list:
            teachers_text = "\n".join(teacher_list[:-1])  # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç
            message = f"""üë®‚Äçüè´ **–ú–æ–∏ —É—á–∏—Ç–µ–ª—è**

{teachers_text}

üí¨ –î–ª—è —Å–≤—è–∑–∏ —Å —É—á–∏—Ç–µ–ª–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ Telegram ID.
üìö –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç –≤–∞—à–∏—Ö —É—á–∏—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ."""
        else:
            message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∏—Ç–µ–ª—è—Ö"
        
        _out(bot, chat_id, message, keyboards.Student.main)
        
    except Exception as e:
        _log(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∏—Ç–µ–ª–µ–π: {e}", chat_id, "ERROR")
        _out(bot, chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∏—Ç–µ–ª–µ–π", keyboards.Student.main)


def _get_help_text(role: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö
    base_help = """üìö –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:

üî∏ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:
‚Ä¢ /–≥–ª–∞–≤–Ω–∞—è - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ –ø–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üî∏ –¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ò–ï –ú–ê–¢–ï–†–ò–ê–õ–´ (–¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º):
‚Ä¢ –∞–ª–≥–µ–±—Ä–∞ - ü§ñ –ü–æ–ª–Ω–æ—Å—Ç—å—é AI-—É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
‚Ä¢ –≥–µ–æ–º–µ—Ç—Ä–∏—è - ü§ñ AI-—É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
‚Ä¢ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ - —Ä–∞–±–æ—Ç–∞ —Å —á–∏—Å–ª–∞–º–∏ –∏ –¥—Ä–æ–±—è–º–∏
‚Ä¢ –Ω–∞–π—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è - —É–ø—Ä–æ—â–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ —Ñ–æ—Ä–º—É–ª—ã —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è - –§–°–£
‚Ä¢ —É—Ä–∞–≤–Ω–µ–Ω–∏—è - —Ä–µ—à–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π
‚Ä¢ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ - —Ä–µ—à–µ–Ω–∏–µ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤
‚Ä¢ –≥—Ä–∞—Ñ–∏–∫–∏ - –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
‚Ä¢ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è - —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

ü§ñ AI –§–£–ù–ö–¶–ò–ò –í –ê–õ–ì–ï–ë–†–ï:
–†–∞–∑–¥–µ–ª "–∞–ª–≥–µ–±—Ä–∞" –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ AI! –î–æ—Å—Ç—É–ø–Ω—ã:
‚Ä¢ ü§ñ AI –û–±—ä—è—Å–Ω–µ–Ω–∏–µ - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π AI –ø–æ–º–æ—â–Ω–∏–∫
‚Ä¢ ü§ñ AI –ü—Ä–∞–∫—Ç–∏–∫–∞ - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ üìö AI –ú–∞—Ç–µ—Ä–∏–∞–ª—ã - –≤—Å–µ —Ç–µ–º—ã –∞–ª–≥–µ–±—Ä—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è AI

üî∏ –†–ê–ó–î–ï–õ–´ –ê–õ–ì–ï–ë–†–´ (AI-–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–µ):
‚Ä¢ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ - –¥—Ä–æ–±–∏, –ø—Ä–æ—Ü–µ–Ω—Ç—ã, —Å—Ç–µ–ø–µ–Ω–∏
‚Ä¢ –Ω–∞–π—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è - –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–ø—Ä–æ—â–µ–Ω–∏–µ
‚Ä¢ —Ä–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏ - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
‚Ä¢ —Ñ–æ—Ä–º—É–ª—ã —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è - –§–°–£
‚Ä¢ —É—Ä–∞–≤–Ω–µ–Ω–∏—è - –≤—Å–µ —Ç–∏–ø—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π
‚Ä¢ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ - –ª–∏–Ω–µ–π–Ω—ã–µ –∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ
‚Ä¢ –≥—Ä–∞—Ñ–∏–∫–∏ - —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏—Ö –≥—Ä–∞—Ñ–∏–∫–∏
‚Ä¢ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è - –æ—Å–Ω–æ–≤—ã –∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è
‚Ä¢ —Ç–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π - –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è

üî∏ –†–ê–ó–î–ï–õ–´ –ì–ï–û–ú–ï–¢–†–ò–ò (ü§ñ AI-—É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏):
‚Ä¢ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏ - üìê —Ç–∏–ø—ã, —Å–≤–æ–π—Å—Ç–≤–∞, —Ñ–æ—Ä–º—É–ª—ã —Å –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏
‚Ä¢ —á–µ—Ç—ã—Ä—ë—Ö—É–≥–æ–ª—å–Ω–∏–∫–∏ - ‚¨ú –∫–≤–∞–¥—Ä–∞—Ç, —Ä–æ–º–±, –ø–∞—Ä–∞–ª–ª–µ–ª–æ–≥—Ä–∞–º–º —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
‚Ä¢ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å - ‚≠ï —ç–ª–µ–º–µ–Ω—Ç—ã –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏, —Ñ–æ—Ä–º—É–ª—ã —Å –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏
‚Ä¢ –ø–ª–æ—â–∞–¥–∏ –∏ –æ–±—ä—ë–º—ã - üìè —Ñ–æ—Ä–º—É–ª—ã 2D –∏ 3D —Ñ–∏–≥—É—Ä —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
‚Ä¢ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è - üìä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏

ü§ñ –ü–û–î–†–û–ë–ù–û –û AI –§–£–ù–ö–¶–ò–Ø–•:

–ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:
1. –ù–∞–±–µ—Ä–∏—Ç–µ "–∞–ª–≥–µ–±—Ä–∞"
2. –ù–∞–∂–º–∏—Ç–µ "ü§ñ AI –û–±—ä—è—Å–Ω–µ–Ω–∏–µ" –∏–ª–∏ "ü§ñ AI –ü—Ä–∞–∫—Ç–∏–∫–∞" (–≤–≤–µ—Ä—Ö—É –º–µ–Ω—é)
3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
4. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞
5. –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ AI —Ä–µ–∂–∏–º–∞: –Ω–∞–∂–º–∏—Ç–µ /–≥–ª–∞–≤–Ω–∞—è –∏–ª–∏ "–æ—Ç–º–µ–Ω–∞"

–î–û–°–¢–£–ü–ù–´–ï AI –ö–û–ú–ê–ù–î–´:
‚Ä¢ ü§ñ –æ–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É - –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ª—é–±–æ–π —Ç–µ–º—ã
‚Ä¢ ü§ñ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É - –ø–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á  
‚Ä¢ ü§ñ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π
‚Ä¢ ü§ñ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ - –∞–Ω–∞–ª–∏–∑ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
‚Ä¢ ü§ñ –¥–∞—Ç—å —Å–æ–≤–µ—Ç—ã - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–∑—É—á–µ–Ω–∏—é
‚Ä¢ ü§ñ –ø–ª–∞–Ω –∏–∑—É—á–µ–Ω–∏—è - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è

üí° –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:
‚Ä¢ "–û–±—ä—è—Å–Ω–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è"
‚Ä¢ "–†–µ—à–∏: x¬≤ - 5x + 6 = 0"
‚Ä¢ "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á–∏ –ø–æ –ª–æ–≥–∞—Ä–∏—Ñ–º–∞–º"
‚Ä¢ "–ü—Ä–æ–≤–µ—Ä—å –º–æ–µ —Ä–µ—à–µ–Ω–∏–µ..."

‚è≥ –í–†–ï–ú–Ø –û–¢–í–ï–¢–ê: AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–π–º–µ—Ç 10-15 —Å–µ–∫—É–Ω–¥
üé® –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï: –û—Ç–≤–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º (**–∂–∏—Ä–Ω—ã–π**, *–∫—É—Ä—Å–∏–≤*, `—Ñ–æ—Ä–º—É–ª—ã`)
üìù –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: LaTeX —Å–∏–º–≤–æ–ª—ã ($$ –∏–ª–∏ $) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è
‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø: API –∫–ª—é—á OpenAI –¥–ª—è —Ä–∞–±–æ—Ç—ã AI —Ñ—É–Ω–∫—Ü–∏–π"""

    if role == "—É—á–∏—Ç–µ–ª—å":
        return base_help + """

üî∏ –ö–û–ú–ê–ù–î–´ –î–õ–Ø –£–ß–ò–¢–ï–õ–Ø:
‚Ä¢ –ø—Ä–æ—Ñ–∏–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º
‚Ä¢ –∑–∞—è–≤–∫–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ –æ—Ç —É—á–µ–Ω–∏–∫–æ–≤ ‚úÖ
‚Ä¢ –ø—Ä–∏–Ω—è—Ç—å —É—á–µ–Ω–∏–∫–∞ - –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É —É—á–µ–Ω–∏–∫–∞ ‚úÖ
‚Ä¢ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–ª–∞—Å—Å - –Ω–∞–π—Ç–∏ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —É—á–µ–Ω–∏–∫–æ–≤
‚Ä¢ –≤–∞—à–∏ —É—á–∞—â–∏–µ—Å—è - —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤
‚Ä¢ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ - —Ä–∞–±–æ—Ç–∞ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
‚Ä¢ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ ai –ø–æ–º–æ—â–Ω–∏–∫ - AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É—á–∏—Ç–µ–ª—è
‚Ä¢ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å - —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞

‚úÖ **–°–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–æ–∫ –∞–∫—Ç–∏–≤–Ω–∞!** –£—á–µ–Ω–∏–∫–∏ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –∑–∞—è–≤–∫–∏."""
    
    elif role == "—É—á–µ–Ω–∏–∫":
        return base_help + """

üî∏ –ö–û–ú–ê–ù–î–´ –î–õ–Ø –£–ß–ï–ù–ò–ö–ê:
‚Ä¢ –ø—Ä–æ—Ñ–∏–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º
‚Ä¢ –∑–∞—è–≤–∫–∏ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É —É—á–∏—Ç–µ–ª—é ‚úÖ
‚Ä¢ –º–æ–∏ —É—á–∏—Ç–µ–ª—è - —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —É—á–∏—Ç–µ–ª–µ–π ‚úÖ
‚Ä¢ –∑–∞–¥–∞–Ω–∏—è - —Ä–∞–±–æ—Ç–∞ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
‚Ä¢ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è - –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É
‚Ä¢ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ

‚úÖ **–°–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–æ–∫ –∞–∫—Ç–∏–≤–Ω–∞!** –ù–∞–π–¥–∏—Ç–µ —É—á–∏—Ç–µ–ª–µ–π –≤ –≤–∞—à–µ–π —à–∫–æ–ª–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É.
‚Ä¢ ai –ø–æ–º–æ—â–Ω–∏–∫ - AI –ø–æ–º–æ—â—å –≤ –æ–±—É—á–µ–Ω–∏–∏
‚Ä¢ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ AI
‚Ä¢ –ø—Ä–∞–∫—Ç–∏–∫–∞ - —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å - —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    
    else:
        return base_help + """

üî∏ –î–õ–Ø –ù–û–í–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:
‚Ä¢ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —É—á–µ–Ω–∏–∫ - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–µ–Ω–∏–∫–∞
‚Ä¢ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —É—á–∏—Ç–µ–ª—å - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∏—Ç–µ–ª—è

üìù –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∫–ª—é—á–∞–µ—Ç:
–î–ª—è —É—á–µ–Ω–∏–∫–æ–≤: –∏–º—è, —Ñ–∞–º–∏–ª–∏—è, –≥–æ—Ä–æ–¥, —à–∫–æ–ª–∞, –∫–ª–∞—Å—Å, –ø–∞—Ä–æ–ª—å
–î–ª—è —É—á–∏—Ç–µ–ª–µ–π: –∏–º—è, —Ñ–∞–º–∏–ª–∏—è, –ø—Ä–µ–¥–º–µ—Ç, –≥–æ—Ä–æ–¥, —à–∫–æ–ª–∞, –ø–∞—Ä–æ–ª—å

–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–µ–Ω–∏–∫–∏ –º–æ–≥—É—Ç –∏—Å–∫–∞—Ç—å —É—á–∏—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ."""

    return base_help


@bot.message_handler()
def main(msg):
    try:
        chat_id = str(msg.chat.id)
        original_text = msg.text
        request = core.transform_request(msg.text)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        _log(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{original_text}' -> –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ: '{request}'", chat_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        role = database.find_my_role(chat_id)
        if role:
            _log(f"üë§ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {role}", chat_id, "SUCCESS")
        else:
            _log("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (–≥–æ—Å—Ç—å)", chat_id, "WARNING")

        # 1) –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–µ–¥–∏–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö)
        _log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...", chat_id, "DEBUG")
        if _handle_theory(request, bot, chat_id):
            _log("üìö –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–¥—É–ª–µ–º —Ç–µ–æ—Ä–∏–∏", chat_id, "SUCCESS")
            return

        # 2) –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ (—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è / –ø–æ–∏—Å–∫ —É—á–µ–Ω–∏–∫–æ–≤ / —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
        _log("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...", chat_id, "DEBUG")
        if _handle_delete_flow(request, chat_id):
            _log("üóëÔ∏è –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è", chat_id, "SUCCESS")
            return
        if _handle_search_flow(request, chat_id):
            _log("üîç –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–µ–º –ø–æ–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤", chat_id, "SUCCESS")
            return
        if _handle_registration_flow(request, chat_id):
            _log("üìù –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", chat_id, "SUCCESS")
            return
        if _handle_application_flow(request, chat_id):
            _log("üìß –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–µ–º –∑–∞—è–≤–∫–∏", chat_id, "SUCCESS")
            return
        if _handle_accept_student_flow(request, chat_id):
            _log("üë• –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–µ–º –ø—Ä–∏–Ω—è—Ç–∏—è —É—á–µ–Ω–∏–∫–∞", chat_id, "SUCCESS")
            return

        # 3) –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–µ–¥–∏–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö)
        _log("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥...", chat_id, "DEBUG")
        if request in START_COMMANDS:
            _log(f"üè† –û–±—Ä–∞–±–æ—Ç–∫–∞ START –∫–æ–º–∞–Ω–¥—ã: {request}", chat_id, "SUCCESS")
            _out(bot, chat_id, "–≥–ª–∞–≤–Ω–∞—è", keyboards.create_keyboard(["/–≥–ª–∞–≤–Ω–∞—è"], ["–ü–æ–º–æ—â—å"]))
            return
        if request in HELP_COMMANDS or request == "–ø–æ–º–æ—â—å":
            _log(f"‚ùì –û–±—Ä–∞–±–æ—Ç–∫–∞ HELP –∫–æ–º–∞–Ω–¥—ã: {request}", chat_id, "SUCCESS")
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥
            help_role = database.find_my_role(chat_id)
            help_text = _get_help_text(help_role)
            _out(bot, chat_id, help_text, keyboards.create_keyboard(["/–≥–ª–∞–≤–Ω–∞—è"]))
            return

        # 4) –í–µ—Ç–≤–ª–µ–Ω–∏–µ –ø–æ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        _log("üé≠ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...", chat_id, "DEBUG")
        role = database.find_my_role(chat_id)

        if role == "—É—á–∏—Ç–µ–ª—å":
            _log(f"üë©‚Äçüè´ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É—á–∏—Ç–µ–ª—è: {request}", chat_id, "SUCCESS")
            # –ü—Ä–æ—Å—Ç–∞—è, –ø–ª–æ—Å–∫–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —É—á–∏—Ç–µ–ª—è
            if request == "–ø—Ä–æ—Ñ–∏–ª—å":
                _out(bot, chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", keyboards.Teacher.profile)
            elif request == "–≤–∞—à–∏ —É—á–∞—â–∏–µ—Å—è":
                _show_teacher_students(bot, chat_id)
            elif request == "–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–ª–∞—Å—Å":
                _start_search_flow(chat_id)
                # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–π —à–∞–≥
                _handle_search_flow("", chat_id)
            elif request == "–∑–∞—è–≤–∫–∏":
                _log("üì® –ü–æ–∫–∞–∑ –∑–∞—è–≤–æ–∫ —É—á–∏—Ç–µ–ª—é", chat_id, "SUCCESS")
                _show_applications_for_teacher(chat_id)
            elif request == "–ø—Ä–∏–Ω—è—Ç—å —É—á–µ–Ω–∏–∫–∞":
                _log("üë• –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —É—á–µ–Ω–∏–∫–∞", chat_id, "SUCCESS")
                _start_accept_student_flow(chat_id)
            elif request == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ":
                # –ó–∞–ø—Ä–µ—Ç –µ—Å–ª–∏ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤
                client = database.Client(chat_id)
                if not getattr(client, "my_students", None):
                    _out(bot, chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤", keyboards.Teacher.main)
                else:
                    _out(bot, chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è", keyboards.Teacher.homework)
            elif request == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ":
                client = database.Client(chat_id)
                if not getattr(client, "my_students", None):
                    _out(bot, chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤", keyboards.Teacher.main)
                else:
                    _out(bot, chat_id, "–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", keyboards.Teacher.main)
            elif request == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å—É":
                client = database.Client(chat_id)
                if not getattr(client, "my_students", None):
                    _out(bot, chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤", keyboards.Teacher.main)
                else:
                    _out(bot, chat_id, "–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è –∫–ª–∞—Å—Å—É –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", keyboards.Teacher.main)
            elif request == "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è" or request == "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è" or request == "–∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∞":
                _out(bot, chat_id, "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", keyboards.Teacher.main)
            elif request == "ai –ø–æ–º–æ—â–Ω–∏–∫":
                _out(bot, chat_id, "–†–∞–∑–¥–µ–ª AI –ü–æ–º–æ—â–Ω–∏–∫", keyboards.Teacher.ai_helper)
            elif request == "—É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
                _start_delete_flow(chat_id)
                _handle_delete_flow("", chat_id)
            else:
                _out(bot, chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            return

        if role == "—É—á–µ–Ω–∏–∫":
            _log(f"üë®‚Äçüéì –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É—á–µ–Ω–∏–∫–∞: {request}", chat_id, "SUCCESS")
            # –ü—Ä–æ—Å—Ç–∞—è, –ø–ª–æ—Å–∫–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–∞
            if request == "–ø—Ä–æ—Ñ–∏–ª—å":
                _out(bot, chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", keyboards.Student.profile)
            elif request == "–∑–∞—è–≤–∫–∏":
                _log("üìß –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏", chat_id, "SUCCESS")
                _start_application_flow(chat_id)
                _handle_application_flow("", chat_id)  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥
            elif request == "–º–æ–∏ —É—á–∏—Ç–µ–ª—è":
                _show_my_teachers(chat_id)
            elif request == "–∑–∞–¥–∞–Ω–∏—è":
                _out(bot, chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏", keyboards.Student.task)
            elif request in ("–ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ"):
                _out(bot, chat_id, "–§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", keyboards.Student.main)
            elif request == "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ":
                _out(bot, chat_id, "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ (–±–µ–∑ —Ä–µ—à–µ–Ω–∏—è)")
            elif request == "ai –ø–æ–º–æ—â–Ω–∏–∫":
                _out(bot, chat_id, "–†–∞–∑–¥–µ–ª AI –ü–æ–º–æ—â–Ω–∏–∫", keyboards.Student.ai_helper)
            elif request in ("–ø—Ä–∞–∫—Ç–∏–∫–∞", "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ"):
                _out(bot, chat_id, "–§—É–Ω–∫—Ü–∏—è AI –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", keyboards.Student.ai_helper)
            elif request == "—É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
                _start_delete_flow(chat_id)
                _handle_delete_flow("", chat_id)
            else:
                _out(bot, chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            return

        # –ì–æ—Å—Ç—å / –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å
        _log(f"üëª –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≥–æ—Å—Ç—è: {request}", chat_id, "WARNING")
        if request == "–∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —É—á–µ–Ω–∏–∫":
            _log("üìù –ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–µ–Ω–∏–∫–∞", chat_id, "SUCCESS")
            _start_registration_flow(chat_id, "—É—á–µ–Ω–∏–∫")
            _handle_registration_flow("", chat_id)  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥
        elif request == "–∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —É—á–∏—Ç–µ–ª—å":
            _log("üìù –ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∏—Ç–µ–ª—è", chat_id, "SUCCESS")
            _start_registration_flow(chat_id, "—É—á–∏—Ç–µ–ª—å")
            _handle_registration_flow("", chat_id)  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥
        else:
            _log(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≥–æ—Å—Ç—è: {request}", chat_id, "WARNING")
            _out(bot, chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.", keyboards.Guest.main)
    except Exception as e:
        _log(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", chat_id, "ERROR")
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            bot.send_message(msg.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        except Exception as inner_e:
            _log(f"üí• –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {inner_e}", chat_id, "ERROR")
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {inner_e}")

if __name__ == "__main__":
    _log("üöÄ === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===", level="SUCCESS")
    _log(f"‚öôÔ∏è Polling –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: timeout={POLLING_TIMEOUT}, none_stop={POLLING_NONE_STOP}")
    _log("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π...", level="SUCCESS")
    try:
        bot.polling(none_stop=POLLING_NONE_STOP, timeout=POLLING_TIMEOUT)
    except Exception as e:
        _log(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê polling: {e}", level="ERROR")
        raise