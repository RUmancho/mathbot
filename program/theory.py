from resource import resource as res
from core import FileSender
import keyboards
from LLM import LLM
from enums import AIMode
from image_generator import get_math_image_generator
import re
import os

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä LLM –¥–ª—è –∞–ª–≥–µ–±—Ä—ã
algebra_ai_assistant = None
bot_instance = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ handler

def get_algebra_ai():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –∞–ª–≥–µ–±—Ä—ã."""
    global algebra_ai_assistant
    try:
        if algebra_ai_assistant is None:
            algebra_ai_assistant = LLM()
            algebra_ai_assistant.set_role("math teacher")
        return algebra_ai_assistant
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LLM: {e}")
        return None

def _send_processing_message(chat_id: str, mode: AIMode):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å."""
    try:
        if bot_instance is None:
            return
        
        processing_messages = {
            AIMode.EXPLAIN: "üß† AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–º—É –∏ –≥–æ—Ç–æ–≤–∏—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ...\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥",
            AIMode.HELP_PROBLEM: "üî¢ AI —Ä–µ—à–∞–µ—Ç –∑–∞–¥–∞—á—É –ø–æ—à–∞–≥–æ–≤–æ...\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥",
            AIMode.PRACTICE: "üìù AI —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏...\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥", 
            AIMode.CHECK_SOLUTION: "üîç AI –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ...\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥",
            AIMode.TIPS: "üí° AI –≥–æ—Ç–æ–≤–∏—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã...\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥",
            AIMode.PLAN: "üìÖ AI —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è...\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥",
            AIMode.GENERATE_TASK: "‚ö° AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É...\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥",
            # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∂–∏–º—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ –∞–ª–≥–µ–±—Ä—ã
            AIMode.COMPUTATIONAL_SKILLS: "üìä AI –≥–æ—Ç–æ–≤–∏—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–º –Ω–∞–≤—ã–∫–∞–º...\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥",
            AIMode.EXPRESSION_VALUE: "üî¢ AI –≥–æ—Ç–æ–≤–∏—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏–π...\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥",
            AIMode.FORMULAS_WORK: "üìù AI –≥–æ—Ç–æ–≤–∏—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ä–∞–±–æ—Ç–µ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏...\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥",
            AIMode.SHORTHAND_FORMULAS: "‚ö° AI –≥–æ—Ç–æ–≤–∏—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è...\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥",
            AIMode.EQUATIONS: "üî∫ AI –≥–æ—Ç–æ–≤–∏—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ä–µ—à–µ–Ω–∏—é —É—Ä–∞–≤–Ω–µ–Ω–∏–π...\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥",
            AIMode.INEQUALITIES: "üìà AI –≥–æ—Ç–æ–≤–∏—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤...\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥",
            AIMode.GRAPHS: "üìä AI –≥–æ—Ç–æ–≤–∏—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –≥—Ä–∞—Ñ–∏–∫–∞–º —Ñ—É–Ω–∫—Ü–∏–π...\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥",
            AIMode.TRIGONOMETRY: "üîÑ AI –≥–æ—Ç–æ–≤–∏—Ç –æ—Å–Ω–æ–≤—ã —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏–∏...\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥",
            AIMode.PROBABILITY: "üé≤ AI –≥–æ—Ç–æ–≤–∏—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–µ–æ—Ä–∏–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π...\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥",
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã –¥–ª—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏
            AIMode.TRIANGLES: "üìê AI –≥–æ—Ç–æ–≤–∏—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞—Ö —Å –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏...\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥",
            AIMode.QUADRILATERALS: "‚¨ú AI –≥–æ—Ç–æ–≤–∏—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ —á–µ—Ç—ã—Ä—ë—Ö—É–≥–æ–ª—å–Ω–∏–∫–∞—Ö —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥",
            AIMode.CIRCLES: "‚≠ï AI –≥–æ—Ç–æ–≤–∏—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ–± –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ —Å –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏...\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥",
            AIMode.AREAS_VOLUMES: "üìè AI –≥–æ—Ç–æ–≤–∏—Ç —Ñ–æ—Ä–º—É–ª—ã –ø–ª–æ—â–∞–¥–µ–π –∏ –æ–±—ä—ë–º–æ–≤ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π...\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥",
            AIMode.COORDINATE_GEOMETRY: "üìä AI –≥–æ—Ç–æ–≤–∏—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏...\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥"
        }
        
        message = processing_messages.get(mode, "ü§ñ AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å...\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥")
        
        bot_instance.send_message(chat_id, message)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")




def _clean_latex_symbols(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç LaTeX —Å–∏–º–≤–æ–ª—ã –∏ –∑–∞–º–µ–Ω—è–µ—Ç –∏—Ö –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç."""
    try:
        import re
        
        # –£–¥–∞–ª—è–µ–º LaTeX display math delimiters: $$ ... $$
        text = re.sub(r'\$\$(.*?)\$\$', r'\1', text, flags=re.DOTALL)
        
        # –£–¥–∞–ª—è–µ–º LaTeX inline math delimiters: $ ... $
        text = re.sub(r'\$(.*?)\$', r'`\1`', text)
        
        # –£–¥–∞–ª—è–µ–º LaTeX –∫–æ–º–∞–Ω–¥—ã \log –∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
        text = re.sub(r'\\log', r'log', text)
        text = re.sub(r'\\[a-zA-Z]+\{([^}]*)\}', r'\1', text)  # –£–¥–∞–ª—è–µ–º \command{content}
        text = re.sub(r'\\[a-zA-Z]+', '', text)  # –£–¥–∞–ª—è–µ–º \command
        
        return text
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ LaTeX: {e}")
        return text

def _process_image_tags(text: str) -> tuple:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–≥–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    try:
        from colorama import Fore, Style
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–≥–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_pattern = r'\[IMAGE:([^\]]+)\]'
        image_tags = re.findall(image_pattern, text)
        
        print(f"{Fore.MAGENTA}üñºÔ∏è [IMAGE PROCESSOR]{Style.RESET_ALL} –ù–∞–π–¥–µ–Ω–æ —Ç–µ–≥–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_tags)}")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞
        clean_text = re.sub(image_pattern, '', text)
        
        # –°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        images_to_generate = []
        
        for tag in image_tags:
            print(f"{Fore.MAGENTA}üè∑Ô∏è [IMAGE TAG]{Style.RESET_ALL} –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–≥–∞: {tag}")
            images_to_generate.append(tag.strip())
        
        return clean_text, images_to_generate
        
    except Exception as e:
        from colorama import Fore, Style
        print(f"{Fore.RED}‚ùå [IMAGE PROCESSOR ERROR]{Style.RESET_ALL} –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–≥–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        return text, []

def _send_generated_images(chat_id: str, image_tags: list):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–≥–æ–≤."""
    try:
        if not image_tags or bot_instance is None:
            return
            
        from colorama import Fore, Style
        print(f"{Fore.CYAN}üé® [IMAGE SENDER]{Style.RESET_ALL} –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é {len(image_tags)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        generator = get_math_image_generator()
        
        for tag in image_tags:
            print(f"{Fore.CYAN}üñºÔ∏è [IMAGE GEN]{Style.RESET_ALL} –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–≥–∞: {tag}")
            
            image_path = None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
            if tag == "trigonometric_circle":
                image_path = generator.generate_trigonometric_circle()
            elif tag == "trigonometric_functions":
                image_path = generator.generate_trigonometric_functions()
            elif tag == "multiple_graphs":
                image_path = generator.generate_multiple_graphs()
            elif tag.startswith("graph_"):
                # –ü–∞—Ä—Å–∏–º —Ç–∏–ø —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ç–µ–≥–∞
                function_type = tag.replace("graph_", "")
                image_path = generator.generate_function_graph(function_type)
            
            # === –ì–ï–û–ú–ï–¢–†–ò–ß–ï–°–ö–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø ===
            elif tag == "triangles_diagram":
                image_path = generator.generate_triangles_diagram()
            elif tag == "quadrilaterals_diagram":
                image_path = generator.generate_quadrilaterals_diagram()
            elif tag == "circle_diagram":
                image_path = generator.generate_circle_diagram()
            elif tag == "areas_volumes_diagram":
                image_path = generator.generate_areas_volumes_diagram()
            elif tag == "coordinate_geometry_diagram":
                image_path = generator.generate_coordinate_geometry_diagram()
            
            else:
                # –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                if "—Ç—Ä–∏–≥–æ–Ω–æ–º" in tag.lower() or "trigon" in tag.lower():
                    if "–æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å" in tag.lower() or "circle" in tag.lower():
                        image_path = generator.generate_trigonometric_circle()
                    else:
                        image_path = generator.generate_trigonometric_functions()
                elif "–≥—Ä–∞—Ñ–∏–∫" in tag.lower() or "graph" in tag.lower():
                    image_path = generator.generate_multiple_graphs()
                elif "—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫" in tag.lower() or "triangle" in tag.lower():
                    image_path = generator.generate_triangles_diagram()
                elif "—á–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω–∏–∫" in tag.lower() or "quadrilateral" in tag.lower():
                    image_path = generator.generate_quadrilaterals_diagram()
                elif "–æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å" in tag.lower() and "—Ç—Ä–∏–≥–æ–Ω–æ–º" not in tag.lower():
                    image_path = generator.generate_circle_diagram()
                elif "–ø–ª–æ—â–∞–¥" in tag.lower() or "–æ–±—ä" in tag.lower() or "volume" in tag.lower():
                    image_path = generator.generate_areas_volumes_diagram()
                elif "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç" in tag.lower() or "coordinate" in tag.lower():
                    image_path = generator.generate_coordinate_geometry_diagram()
                else:
                    print(f"{Fore.YELLOW}‚ö†Ô∏è [IMAGE GEN]{Style.RESET_ALL} –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {tag}")
                    continue
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if image_path and os.path.exists(image_path):
                try:
                    with open(image_path, 'rb') as photo:
                        bot_instance.send_photo(chat_id, photo)
                    print(f"{Fore.GREEN}‚úÖ [IMAGE SENT]{Style.RESET_ALL} –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {os.path.basename(image_path)}")
                except Exception as e:
                    print(f"{Fore.RED}‚ùå [IMAGE SEND ERROR]{Style.RESET_ALL} –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
            else:
                print(f"{Fore.RED}‚ùå [IMAGE GEN ERROR]{Style.RESET_ALL} –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ–≥–∞: {tag}")
                
    except Exception as e:
        from colorama import Fore, Style
        print(f"{Fore.RED}üí• [IMAGE SENDER ERROR]{Style.RESET_ALL} –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")

def _send_ai_response(chat_id: str, text: str, keyboard=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç AI –æ—Ç–≤–µ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    try:
        if bot_instance is None:
            print("Bot instance –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–≥–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        text_parts, images = _process_image_tags(text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞
        _send_generated_images(chat_id, images)
        
        # –û—á–∏—â–∞–µ–º LaTeX —Å–∏–º–≤–æ–ª—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Å—Ç–æ–π Markdown
        final_text = _clean_latex_symbols(text_parts)
        from colorama import Fore, Style
        print(f"{Fore.BLUE}üìù [MARKDOWN]{Style.RESET_ALL} –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –¥–ª–∏–Ω–∞: {len(final_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ (Telegram –ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
        max_length = 4000
        if len(final_text) <= max_length:
            bot_instance.send_message(
                chat_id, 
                final_text, 
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = []
            current_part = ""
            
            for line in final_text.split('\n'):
                if len(current_part) + len(line) + 1 <= max_length:
                    current_part += line + '\n'
                else:
                    if current_part:
                        parts.append(current_part.strip())
                    current_part = line + '\n'
            
            if current_part:
                parts.append(current_part.strip())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
            for i, part in enumerate(parts):
                if i == len(parts) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    bot_instance.send_message(
                        chat_id, 
                        f"üìÑ –ß–∞—Å—Ç—å {i+1}/{len(parts)}:\n\n{part}", 
                        reply_markup=keyboard,
                        parse_mode='Markdown'
                    )
                else:
                    bot_instance.send_message(
                        chat_id, 
                        f"üìÑ –ß–∞—Å—Ç—å {i+1}/{len(parts)}:\n\n{part}",
                        parse_mode='Markdown'
                    )
                    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ AI –æ—Ç–≤–µ—Ç–∞ —Å Markdown: {e}")
        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            bot_instance.send_message(chat_id, text, reply_markup=keyboard)
        except Exception as fallback_e:
            print(f"–û—à–∏–±–∫–∞ fallback –æ—Ç–ø—Ä–∞–≤–∫–∏: {fallback_e}")

math = {
    "–∞–ª–≥–µ–±—Ä–∞": ("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", keyboards.algebra),
    "–≥–µ–æ–º–µ—Ç—Ä–∏—è": ("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", keyboards.geometry),
    "–≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏": ("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ç–µ–º—É", keyboards.calculation),
    "–Ω–∞–π—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è": ("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É", keyboards.expression),
    "–≥—Ä–∞—Ñ–∏–∫–∏": ("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É", keyboards.graphics),
    "—Ñ–æ—Ä–º—É–ª—ã —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è": ("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É", keyboards.AMF),
    "—É—Ä–∞–≤–Ω–µ–Ω–∏—è": ("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É", keyboards.equation),
    "–Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞": ("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É", keyboards.inequality),
    "—Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è": ("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É", keyboards.trigonometry),
    # "—Ä–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏": (...),
}

algebra_theory = {
    "–¥–µ–π—Å—Ç–≤–∏—è —Å –æ–±—ã—á–Ω—ã–º–∏ –¥—Ä–æ–±—è–º–∏"        : FileSender(keyboards.calculation,  res["algebra"]["calculations"]["fractions_theory"], res["algebra"]["calculations"]["fractions_image"]),
    "–∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–µ–Ω—å"              : FileSender(keyboards.expression,   res["algebra"]["expressions"]["square_root_theory"]),
    "–∫–≤–∞–¥—Ä–∞—Ç —Å—É–º–º—ã"                      : FileSender(keyboards.AMF,          res["algebra"]["AMF"]["square_of_sum_theory"]),
    "–∫–≤–∞–¥—Ä–∞—Ç —Ä–∞–∑–Ω–æ—Å—Ç–∏"                   : FileSender(keyboards.AMF,          res["algebra"]["AMF"]["square_of_difference_theory"]),
    "—Ä–∞–∑–Ω–æ—Å—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–æ–≤"                 : FileSender(keyboards.AMF,          res["algebra"]["AMF"]["difference_of_squares_theory"]),
    "–∫—É–± —Å—É–º–º—ã"                          : FileSender(keyboards.AMF,          res["algebra"]["AMF"]["cube_of_sum_theory"]),
    "–∫—É–± —Ä–∞–∑–Ω–æ—Å—Ç–∏"                       : FileSender(keyboards.AMF,          res["algebra"]["AMF"]["cube_of_difference_theory"]),
    "—Å—É–º–º–∞ –∫—É–±–æ–≤"                        : FileSender(keyboards.AMF,          res["algebra"]["AMF"]["sum_of_cubes_theory"]),
    "—Ä–∞–∑–Ω–æ—Å—Ç—å –∫—É–±–æ–≤"                     : FileSender(keyboards.AMF,          res["algebra"]["AMF"]["difference_of_cubes_theory"]),
    "–ª–∏–Ω–µ–π–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è"                 : FileSender(keyboards.equation,     res["algebra"]["equations"]["linear_equations_theory"]),
    "–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è (–¥–µ—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç)": FileSender(keyboards.equation,     res["algebra"]["equations"]["quadratic_via_discriminant_theory"]),
    "–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è (–≤–∏–µ—Ç)"        : FileSender(keyboards.equation,     res["algebra"]["equations"]["quadratic_via_viet_theorem_theory"]),
    "—É—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–∏–¥–∞ ax¬≤ + bx = 0"        : FileSender(keyboards.equation,     res["algebra"]["equations"]["incomplete_quadratic_type1_theory"]),
    "—É—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–∏–¥–∞ ax¬≤ + c = 0"         : FileSender(keyboards.equation,     res["algebra"]["equations"]["incomplete_quadratic_type2_theory"]),
    "–ª–∏–Ω–µ–π–Ω—ã–µ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞"               : FileSender(keyboards.inequality,   res["algebra"]["inequalities"]["linear_inequalities_theory"]),
    "–æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏": FileSender(keyboards.trigonometry, res["algebra"]["trigonometry"]["basic_trigonometric_functions_theory"]),
    "—Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è"       : FileSender(keyboards.trigonometry, res["algebra"]["trigonometry"]["trigonometric_equations_theory"])
}

geometry_theory = {
    "—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏"        : FileSender(keyboards.geometry, res["geometry"]["figures"]["triangle"]),
    "—á–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω–∏–∫–∏"    : FileSender(keyboards.geometry, res["geometry"]["figures"]["quadrilaterals"]),
    "–æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å"          : FileSender(keyboards.geometry, res["geometry"]["figures"]["circle"]),
    "–ø–ª–æ—â–∞–¥–∏ –∏ –æ–±—ä–µ–º—ã"    : FileSender(keyboards.geometry, res["geometry"]["documents"]["geometry_guide"]),
    "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è": FileSender(keyboards.geometry, res["geometry"]["documents"]["geometry_guide"])
}

# AI —Ñ–ª–æ—É –¥–ª—è –∞–ª–≥–µ–±—Ä—ã
ALGEBRA_AI_FLOWS = {}  # chat_id -> {"mode": AIMode, "step": str, "data": dict}

def _handle_algebra_ai_flow(request: str, chat_id: str, text_out) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç AI —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –∞–ª–≥–µ–±—Ä—ã."""
    try:
        flow = ALGEBRA_AI_FLOWS.get(chat_id)
        
        if request == "ü§ñ ai –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ":
            text_out("–í—ã–±–µ—Ä–∏—Ç–µ AI —Ñ—É–Ω–∫—Ü–∏—é:", keyboards.algebra_ai)
            return True
        elif request == "ü§ñ ai –ø—Ä–∞–∫—Ç–∏–∫–∞":
            text_out("–í—ã–±–µ—Ä–∏—Ç–µ AI —Ñ—É–Ω–∫—Ü–∏—é:", keyboards.algebra_ai)
            return True
        elif request == "ü§ñ –æ–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É":
            from colorama import Fore, Style
            print(f"{Fore.GREEN}üéØ [THEORY AI]{Style.RESET_ALL} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—É—Å—Ç–∏–ª —Ä–µ–∂–∏–º –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ç–µ–º—ã")
            text_out("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –∞–ª–≥–µ–±—Ä—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è', '–ª–æ–≥–∞—Ä–∏—Ñ–º—ã', '–ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ')")
            ALGEBRA_AI_FLOWS[chat_id] = {"mode": AIMode.EXPLAIN, "step": "waiting_topic", "data": {}}
            return True
        elif request == "ü§ñ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É":
            text_out("–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å:")
            ALGEBRA_AI_FLOWS[chat_id] = {"mode": AIMode.HELP_PROBLEM, "step": "waiting_problem", "data": {}}
            return True
        elif request == "ü§ñ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏":
            text_out("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ª–∏–Ω–µ–π–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è', '–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏'):")
            ALGEBRA_AI_FLOWS[chat_id] = {"mode": AIMode.PRACTICE, "step": "waiting_topic", "data": {}}
            return True
        elif request == "ü§ñ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ":
            text_out("–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
            ALGEBRA_AI_FLOWS[chat_id] = {"mode": AIMode.CHECK_SOLUTION, "step": "waiting_solution", "data": {}}
            return True
        elif request == "ü§ñ –¥–∞—Ç—å —Å–æ–≤–µ—Ç—ã":
            text_out("–ü–æ –∫–∞–∫–æ–π —Ç–µ–º–µ –∞–ª–≥–µ–±—Ä—ã –¥–∞—Ç—å —Å–æ–≤–µ—Ç—ã? (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–∏–∑—É—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π', '—Ä–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–π'):")
            ALGEBRA_AI_FLOWS[chat_id] = {"mode": AIMode.TIPS, "step": "waiting_topic", "data": {}}
            return True
        elif request == "ü§ñ –ø–ª–∞–Ω –∏–∑—É—á–µ–Ω–∏—è":
            text_out("–î–ª—è –∫–∞–∫–æ–π —Ç–µ–º—ã —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –∏–∑—É—á–µ–Ω–∏—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–∞–ª–≥–µ–±—Ä–∞ 9 –∫–ª–∞—Å—Å', '—Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è'):")
            ALGEBRA_AI_FLOWS[chat_id] = {"mode": AIMode.PLAN, "step": "waiting_topic", "data": {}}
            return True
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö AI —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        if flow:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ—Ä—ã–≤–∞—Ç—å AI —Ñ–ª–æ—É
            navigation_commands = [
                "/–≥–ª–∞–≤–Ω–∞—è", "/start", "/–º–µ–Ω—é", "/menu", "/main", "/home", 
                "–≥–ª–∞–≤–Ω–∞—è", "—Å—Ç–∞—Ä—Ç", "–º–µ–Ω—é", "menu", "main", "home",
                "–∞–ª–≥–µ–±—Ä–∞", "–≥–µ–æ–º–µ—Ç—Ä–∏—è", "–ø–æ–º–æ—â—å", "help", "/help"
            ]
            if request in navigation_commands:
                ALGEBRA_AI_FLOWS.pop(chat_id, None)
                print(f"AI —Ñ–ª–æ—É –ø—Ä–µ—Ä–≤–∞–Ω –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π: {request}")
                return False  # –ü–æ–∑–≤–æ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
            
            if request == "–æ—Ç–º–µ–Ω–∞":
                ALGEBRA_AI_FLOWS.pop(chat_id, None)
                text_out("AI –∑–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω", keyboards.algebra)
                return True
            
            ai = get_algebra_ai()
            if ai is None:
                text_out("AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", keyboards.algebra)
                ALGEBRA_AI_FLOWS.pop(chat_id, None)
                return True
            
            try:
                from colorama import Fore, Style
                print(f"{Fore.CYAN}ü§ñ [THEORY AI]{Style.RESET_ALL} –û–±—Ä–∞–±–æ—Ç–∫–∞ AI –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {chat_id}, —Ä–µ–∂–∏–º: {flow['mode']}, —Ç–µ–∫—Å—Ç: '{request[:100]}...'")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å
                _send_processing_message(chat_id, flow["mode"])
                
                print(f"{Fore.YELLOW}üì° [THEORY AI]{Style.RESET_ALL} –í—ã–∑–æ–≤ ai.respond() –¥–ª—è {chat_id}")
                response = ai.respond(flow["mode"], request)
                print(f"{Fore.GREEN}‚úÖ [THEORY AI]{Style.RESET_ALL} –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è {chat_id}, –¥–ª–∏–Ω–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AI –æ—Ç–≤–µ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                _send_ai_response(chat_id, f"ü§ñ {response}", keyboards.algebra_ai)
                print(f"{Fore.GREEN}üì§ [THEORY AI]{Style.RESET_ALL} –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                
                ALGEBRA_AI_FLOWS.pop(chat_id, None)  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ–ª–æ—É
                print(f"{Fore.MAGENTA}üîö [THEORY AI]{Style.RESET_ALL} AI —Ñ–ª–æ—É –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {chat_id}")
                return True
            except Exception as e:
                from colorama import Fore, Style
                print(f"{Fore.RED}üí• [THEORY AI ERROR]{Style.RESET_ALL} –û—à–∏–±–∫–∞ AI –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {chat_id}: {e}")
                text_out("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ AI –∑–∞–ø—Ä–æ—Å–∞", keyboards.algebra)
                ALGEBRA_AI_FLOWS.pop(chat_id, None)
                return True
        
        return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ AI —Ñ–ª–æ—É –∞–ª–≥–µ–±—Ä—ã: {e}")
        ALGEBRA_AI_FLOWS.pop(chat_id, None)
        return False


def _handle_algebra_llm_topics(request: str, chat_id: str, text_out) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–º—ã –∞–ª–≥–µ–±—Ä—ã —á–µ—Ä–µ–∑ LLM –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–æ–≤."""
    try:
        # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Å AI —Ä–µ–∂–∏–º–∞–º–∏
        algebra_llm_commands = {
            "–≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏": AIMode.COMPUTATIONAL_SKILLS,
            "–Ω–∞–π—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è": AIMode.EXPRESSION_VALUE,
            "—Ä–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏": AIMode.FORMULAS_WORK,
            "—Ñ–æ—Ä–º—É–ª—ã —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è": AIMode.SHORTHAND_FORMULAS,
            "—É—Ä–∞–≤–Ω–µ–Ω–∏—è": AIMode.EQUATIONS,
            "–Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞": AIMode.INEQUALITIES,
            "–≥—Ä–∞—Ñ–∏–∫–∏": AIMode.GRAPHS,
            "—Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è": AIMode.TRIGONOMETRY,
            "—Ç–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π": AIMode.PROBABILITY
        }
        
        if request not in algebra_llm_commands:
            return False
        
        ai_mode = algebra_llm_commands[request]
        
        # –ü–æ–ª—É—á–∞–µ–º AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        ai = get_algebra_ai()
        if ai is None:
            text_out("AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", keyboards.algebra)
            return True
        
        try:
            from colorama import Fore, Style
            print(f"{Fore.CYAN}üìö [ALGEBRA LLM]{Style.RESET_ALL} –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ–º—ã: {request} (—Ä–µ–∂–∏–º: {ai_mode})")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç
            _send_processing_message(chat_id, ai_mode)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ LLM
            response = ai.respond(ai_mode, request)
            print(f"{Fore.GREEN}‚úÖ [ALGEBRA LLM]{Style.RESET_ALL} –ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            _send_ai_response(chat_id, f"üìö {response}", keyboards.algebra)
            print(f"{Fore.GREEN}üì§ [ALGEBRA LLM]{Style.RESET_ALL} –ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            
            return True
            
        except Exception as e:
            from colorama import Fore, Style
            print(f"{Fore.RED}üí• [ALGEBRA LLM ERROR]{Style.RESET_ALL} –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è {chat_id}: {e}")
            text_out("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", keyboards.algebra)
            return True
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ LLM —Ç–µ–º –∞–ª–≥–µ–±—Ä—ã: {e}")
        return False

def _handle_geometry_llm_topics(request: str, chat_id: str, text_out) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —á–µ—Ä–µ–∑ LLM —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏."""
    try:
        # –°–ª–æ–≤–∞—Ä—å –∫–æ–º–∞–Ω–¥ –≥–µ–æ–º–µ—Ç—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ LLM
        geometry_llm_commands = {
            "—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏": AIMode.TRIANGLES,
            "—á–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω–∏–∫–∏": AIMode.QUADRILATERALS,
            "–æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å": AIMode.CIRCLES,
            "–ø–ª–æ—â–∞–¥–∏ –∏ –æ–±—ä–µ–º—ã": AIMode.AREAS_VOLUMES,
            "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è": AIMode.COORDINATE_GEOMETRY
        }
        
        if request not in geometry_llm_commands:
            return False
        
        ai_mode = geometry_llm_commands[request]
        
        # –ü–æ–ª—É—á–∞–µ–º AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        ai = get_algebra_ai()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ AI —ç–∫–∑–µ–º–ø–ª—è—Ä
        if ai is None:
            text_out("AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", keyboards.geometry)
            return True
        
        try:
            from colorama import Fore, Style
            print(f"{Fore.MAGENTA}üìê [GEOMETRY LLM]{Style.RESET_ALL} –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ–º—ã: {request} (—Ä–µ–∂–∏–º: {ai_mode})")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç
            _send_processing_message(chat_id, ai_mode)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ LLM
            response = ai.respond(ai_mode, request)
            print(f"{Fore.GREEN}‚úÖ [GEOMETRY LLM]{Style.RESET_ALL} –ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            _send_ai_response(chat_id, f"üìê {response}", keyboards.geometry)
            print(f"{Fore.GREEN}üì§ [GEOMETRY LLM]{Style.RESET_ALL} –ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            
            return True
            
        except Exception as e:
            from colorama import Fore, Style
            print(f"{Fore.RED}üí• [GEOMETRY LLM ERROR]{Style.RESET_ALL} –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è {chat_id}: {e}")
            text_out("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", keyboards.geometry)
            return True
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ LLM —Ç–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏–∏: {e}")
        return False

def handler(request, text_out, chat_id, bot=None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ–±—Å–ª—É–∂–µ–Ω (—Ç–µ–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã
    –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã), –∏–Ω–∞—á–µ False ‚Äî —á—Ç–æ–±—ã –¥–∞–ª—å–Ω–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ –∑–∞–ø—Ä–æ—Å.
    """
    try:
        global bot_instance
        if bot:
            bot_instance = bot
            
        FileSender.set_chat_id(chat_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ AI –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–ª–≥–µ–±—Ä—ã
        if _handle_algebra_ai_flow(request, chat_id, text_out):
            return True
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∞–ª–≥–µ–±—Ä–∞ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ LLM
        if _handle_algebra_llm_topics(request, chat_id, text_out):
            return True
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ LLM
        if _handle_geometry_llm_topics(request, chat_id, text_out):
            return True
        
        if request in math.keys():
            text_out(math[request][0], math[request][1])
            return True

        elif request in algebra_theory.keys():
            algebra_theory[request].push()
            return True
        
        elif request in geometry_theory.keys():
            geometry_theory[request].push()
            return True
        
        return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–æ—Ä–∏–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{request}': {e}")
        return False